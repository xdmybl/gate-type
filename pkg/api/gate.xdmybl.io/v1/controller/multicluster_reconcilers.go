// Code generated by engine gate build no edit

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	gate_xdmybl_io_v1 "github.com/xdmybl/gate-type/pkg/api/gate.xdmybl.io/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the CaCertificate Resource across clusters.
// implemented by the user
type MulticlusterCaCertificateReconciler interface {
	ReconcileCaCertificate(clusterName string, obj *gate_xdmybl_io_v1.CaCertificate) (reconcile.Result, error)
}

// Reconcile deletion events for the CaCertificate Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterCaCertificateDeletionReconciler interface {
	ReconcileCaCertificateDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterCaCertificateReconcilerFuncs struct {
	OnReconcileCaCertificate         func(clusterName string, obj *gate_xdmybl_io_v1.CaCertificate) (reconcile.Result, error)
	OnReconcileCaCertificateDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterCaCertificateReconcilerFuncs) ReconcileCaCertificate(clusterName string, obj *gate_xdmybl_io_v1.CaCertificate) (reconcile.Result, error) {
	if f.OnReconcileCaCertificate == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileCaCertificate(clusterName, obj)
}

func (f *MulticlusterCaCertificateReconcilerFuncs) ReconcileCaCertificateDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileCaCertificateDeletion == nil {
		return nil
	}
	return f.OnReconcileCaCertificateDeletion(clusterName, req)
}

type MulticlusterCaCertificateReconcileLoop interface {
	// AddMulticlusterCaCertificateReconciler adds a MulticlusterCaCertificateReconciler to the MulticlusterCaCertificateReconcileLoop.
	AddMulticlusterCaCertificateReconciler(ctx context.Context, rec MulticlusterCaCertificateReconciler, predicates ...predicate.Predicate)
}

type multiclusterCaCertificateReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterCaCertificateReconcileLoop) AddMulticlusterCaCertificateReconciler(ctx context.Context, rec MulticlusterCaCertificateReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericCaCertificateMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterCaCertificateReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterCaCertificateReconcileLoop {
	return &multiclusterCaCertificateReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &gate_xdmybl_io_v1.CaCertificate{}, options)}
}

type genericCaCertificateMulticlusterReconciler struct {
	reconciler MulticlusterCaCertificateReconciler
}

func (g genericCaCertificateMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterCaCertificateDeletionReconciler); ok {
		return deletionReconciler.ReconcileCaCertificateDeletion(cluster, req)
	}
	return nil
}

func (g genericCaCertificateMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*gate_xdmybl_io_v1.CaCertificate)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: CaCertificate handler received event for %T", object)
	}
	return g.reconciler.ReconcileCaCertificate(cluster, obj)
}

// Reconcile Upsert events for the SslCertificate Resource across clusters.
// implemented by the user
type MulticlusterSslCertificateReconciler interface {
	ReconcileSslCertificate(clusterName string, obj *gate_xdmybl_io_v1.SslCertificate) (reconcile.Result, error)
}

// Reconcile deletion events for the SslCertificate Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterSslCertificateDeletionReconciler interface {
	ReconcileSslCertificateDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterSslCertificateReconcilerFuncs struct {
	OnReconcileSslCertificate         func(clusterName string, obj *gate_xdmybl_io_v1.SslCertificate) (reconcile.Result, error)
	OnReconcileSslCertificateDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterSslCertificateReconcilerFuncs) ReconcileSslCertificate(clusterName string, obj *gate_xdmybl_io_v1.SslCertificate) (reconcile.Result, error) {
	if f.OnReconcileSslCertificate == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileSslCertificate(clusterName, obj)
}

func (f *MulticlusterSslCertificateReconcilerFuncs) ReconcileSslCertificateDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileSslCertificateDeletion == nil {
		return nil
	}
	return f.OnReconcileSslCertificateDeletion(clusterName, req)
}

type MulticlusterSslCertificateReconcileLoop interface {
	// AddMulticlusterSslCertificateReconciler adds a MulticlusterSslCertificateReconciler to the MulticlusterSslCertificateReconcileLoop.
	AddMulticlusterSslCertificateReconciler(ctx context.Context, rec MulticlusterSslCertificateReconciler, predicates ...predicate.Predicate)
}

type multiclusterSslCertificateReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterSslCertificateReconcileLoop) AddMulticlusterSslCertificateReconciler(ctx context.Context, rec MulticlusterSslCertificateReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericSslCertificateMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterSslCertificateReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterSslCertificateReconcileLoop {
	return &multiclusterSslCertificateReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &gate_xdmybl_io_v1.SslCertificate{}, options)}
}

type genericSslCertificateMulticlusterReconciler struct {
	reconciler MulticlusterSslCertificateReconciler
}

func (g genericSslCertificateMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterSslCertificateDeletionReconciler); ok {
		return deletionReconciler.ReconcileSslCertificateDeletion(cluster, req)
	}
	return nil
}

func (g genericSslCertificateMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*gate_xdmybl_io_v1.SslCertificate)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: SslCertificate handler received event for %T", object)
	}
	return g.reconciler.ReconcileSslCertificate(cluster, obj)
}

// Reconcile Upsert events for the Upstream Resource across clusters.
// implemented by the user
type MulticlusterUpstreamReconciler interface {
	ReconcileUpstream(clusterName string, obj *gate_xdmybl_io_v1.Upstream) (reconcile.Result, error)
}

// Reconcile deletion events for the Upstream Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterUpstreamDeletionReconciler interface {
	ReconcileUpstreamDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterUpstreamReconcilerFuncs struct {
	OnReconcileUpstream         func(clusterName string, obj *gate_xdmybl_io_v1.Upstream) (reconcile.Result, error)
	OnReconcileUpstreamDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterUpstreamReconcilerFuncs) ReconcileUpstream(clusterName string, obj *gate_xdmybl_io_v1.Upstream) (reconcile.Result, error) {
	if f.OnReconcileUpstream == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileUpstream(clusterName, obj)
}

func (f *MulticlusterUpstreamReconcilerFuncs) ReconcileUpstreamDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileUpstreamDeletion == nil {
		return nil
	}
	return f.OnReconcileUpstreamDeletion(clusterName, req)
}

type MulticlusterUpstreamReconcileLoop interface {
	// AddMulticlusterUpstreamReconciler adds a MulticlusterUpstreamReconciler to the MulticlusterUpstreamReconcileLoop.
	AddMulticlusterUpstreamReconciler(ctx context.Context, rec MulticlusterUpstreamReconciler, predicates ...predicate.Predicate)
}

type multiclusterUpstreamReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterUpstreamReconcileLoop) AddMulticlusterUpstreamReconciler(ctx context.Context, rec MulticlusterUpstreamReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericUpstreamMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterUpstreamReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterUpstreamReconcileLoop {
	return &multiclusterUpstreamReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &gate_xdmybl_io_v1.Upstream{}, options)}
}

type genericUpstreamMulticlusterReconciler struct {
	reconciler MulticlusterUpstreamReconciler
}

func (g genericUpstreamMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterUpstreamDeletionReconciler); ok {
		return deletionReconciler.ReconcileUpstreamDeletion(cluster, req)
	}
	return nil
}

func (g genericUpstreamMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*gate_xdmybl_io_v1.Upstream)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: Upstream handler received event for %T", object)
	}
	return g.reconciler.ReconcileUpstream(cluster, obj)
}

// Reconcile Upsert events for the Gateway Resource across clusters.
// implemented by the user
type MulticlusterGatewayReconciler interface {
	ReconcileGateway(clusterName string, obj *gate_xdmybl_io_v1.Gateway) (reconcile.Result, error)
}

// Reconcile deletion events for the Gateway Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterGatewayDeletionReconciler interface {
	ReconcileGatewayDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterGatewayReconcilerFuncs struct {
	OnReconcileGateway         func(clusterName string, obj *gate_xdmybl_io_v1.Gateway) (reconcile.Result, error)
	OnReconcileGatewayDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterGatewayReconcilerFuncs) ReconcileGateway(clusterName string, obj *gate_xdmybl_io_v1.Gateway) (reconcile.Result, error) {
	if f.OnReconcileGateway == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileGateway(clusterName, obj)
}

func (f *MulticlusterGatewayReconcilerFuncs) ReconcileGatewayDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileGatewayDeletion == nil {
		return nil
	}
	return f.OnReconcileGatewayDeletion(clusterName, req)
}

type MulticlusterGatewayReconcileLoop interface {
	// AddMulticlusterGatewayReconciler adds a MulticlusterGatewayReconciler to the MulticlusterGatewayReconcileLoop.
	AddMulticlusterGatewayReconciler(ctx context.Context, rec MulticlusterGatewayReconciler, predicates ...predicate.Predicate)
}

type multiclusterGatewayReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterGatewayReconcileLoop) AddMulticlusterGatewayReconciler(ctx context.Context, rec MulticlusterGatewayReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericGatewayMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterGatewayReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterGatewayReconcileLoop {
	return &multiclusterGatewayReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &gate_xdmybl_io_v1.Gateway{}, options)}
}

type genericGatewayMulticlusterReconciler struct {
	reconciler MulticlusterGatewayReconciler
}

func (g genericGatewayMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterGatewayDeletionReconciler); ok {
		return deletionReconciler.ReconcileGatewayDeletion(cluster, req)
	}
	return nil
}

func (g genericGatewayMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*gate_xdmybl_io_v1.Gateway)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: Gateway handler received event for %T", object)
	}
	return g.reconciler.ReconcileGateway(cluster, obj)
}

// Reconcile Upsert events for the Filter Resource across clusters.
// implemented by the user
type MulticlusterFilterReconciler interface {
	ReconcileFilter(clusterName string, obj *gate_xdmybl_io_v1.Filter) (reconcile.Result, error)
}

// Reconcile deletion events for the Filter Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterFilterDeletionReconciler interface {
	ReconcileFilterDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterFilterReconcilerFuncs struct {
	OnReconcileFilter         func(clusterName string, obj *gate_xdmybl_io_v1.Filter) (reconcile.Result, error)
	OnReconcileFilterDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterFilterReconcilerFuncs) ReconcileFilter(clusterName string, obj *gate_xdmybl_io_v1.Filter) (reconcile.Result, error) {
	if f.OnReconcileFilter == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileFilter(clusterName, obj)
}

func (f *MulticlusterFilterReconcilerFuncs) ReconcileFilterDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileFilterDeletion == nil {
		return nil
	}
	return f.OnReconcileFilterDeletion(clusterName, req)
}

type MulticlusterFilterReconcileLoop interface {
	// AddMulticlusterFilterReconciler adds a MulticlusterFilterReconciler to the MulticlusterFilterReconcileLoop.
	AddMulticlusterFilterReconciler(ctx context.Context, rec MulticlusterFilterReconciler, predicates ...predicate.Predicate)
}

type multiclusterFilterReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterFilterReconcileLoop) AddMulticlusterFilterReconciler(ctx context.Context, rec MulticlusterFilterReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericFilterMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterFilterReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterFilterReconcileLoop {
	return &multiclusterFilterReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &gate_xdmybl_io_v1.Filter{}, options)}
}

type genericFilterMulticlusterReconciler struct {
	reconciler MulticlusterFilterReconciler
}

func (g genericFilterMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterFilterDeletionReconciler); ok {
		return deletionReconciler.ReconcileFilterDeletion(cluster, req)
	}
	return nil
}

func (g genericFilterMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*gate_xdmybl_io_v1.Filter)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: Filter handler received event for %T", object)
	}
	return g.reconciler.ReconcileFilter(cluster, obj)
}
