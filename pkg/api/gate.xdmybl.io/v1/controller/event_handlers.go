// Code generated by engine gate build no edit

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	gate_xdmybl_io_v1 "github.com/xdmybl/gate-type/pkg/api/gate.xdmybl.io/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the CaCertificate Resource
// DEPRECATED: Prefer reconciler pattern.
type CaCertificateEventHandler interface {
	CreateCaCertificate(obj *gate_xdmybl_io_v1.CaCertificate) error
	UpdateCaCertificate(old, new *gate_xdmybl_io_v1.CaCertificate) error
	DeleteCaCertificate(obj *gate_xdmybl_io_v1.CaCertificate) error
	GenericCaCertificate(obj *gate_xdmybl_io_v1.CaCertificate) error
}

type CaCertificateEventHandlerFuncs struct {
	OnCreate  func(obj *gate_xdmybl_io_v1.CaCertificate) error
	OnUpdate  func(old, new *gate_xdmybl_io_v1.CaCertificate) error
	OnDelete  func(obj *gate_xdmybl_io_v1.CaCertificate) error
	OnGeneric func(obj *gate_xdmybl_io_v1.CaCertificate) error
}

func (f *CaCertificateEventHandlerFuncs) CreateCaCertificate(obj *gate_xdmybl_io_v1.CaCertificate) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *CaCertificateEventHandlerFuncs) DeleteCaCertificate(obj *gate_xdmybl_io_v1.CaCertificate) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *CaCertificateEventHandlerFuncs) UpdateCaCertificate(objOld, objNew *gate_xdmybl_io_v1.CaCertificate) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *CaCertificateEventHandlerFuncs) GenericCaCertificate(obj *gate_xdmybl_io_v1.CaCertificate) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type CaCertificateEventWatcher interface {
	AddEventHandler(ctx context.Context, h CaCertificateEventHandler, predicates ...predicate.Predicate) error
}

type caCertificateEventWatcher struct {
	watcher events.EventWatcher
}

func NewCaCertificateEventWatcher(name string, mgr manager.Manager) CaCertificateEventWatcher {
	return &caCertificateEventWatcher{
		watcher: events.NewWatcher(name, mgr, &gate_xdmybl_io_v1.CaCertificate{}),
	}
}

func (c *caCertificateEventWatcher) AddEventHandler(ctx context.Context, h CaCertificateEventHandler, predicates ...predicate.Predicate) error {
	handler := genericCaCertificateHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericCaCertificateHandler implements a generic events.EventHandler
type genericCaCertificateHandler struct {
	handler CaCertificateEventHandler
}

func (h genericCaCertificateHandler) Create(object client.Object) error {
	obj, ok := object.(*gate_xdmybl_io_v1.CaCertificate)
	if !ok {
		return errors.Errorf("internal error: CaCertificate handler received event for %T", object)
	}
	return h.handler.CreateCaCertificate(obj)
}

func (h genericCaCertificateHandler) Delete(object client.Object) error {
	obj, ok := object.(*gate_xdmybl_io_v1.CaCertificate)
	if !ok {
		return errors.Errorf("internal error: CaCertificate handler received event for %T", object)
	}
	return h.handler.DeleteCaCertificate(obj)
}

func (h genericCaCertificateHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*gate_xdmybl_io_v1.CaCertificate)
	if !ok {
		return errors.Errorf("internal error: CaCertificate handler received event for %T", old)
	}
	objNew, ok := new.(*gate_xdmybl_io_v1.CaCertificate)
	if !ok {
		return errors.Errorf("internal error: CaCertificate handler received event for %T", new)
	}
	return h.handler.UpdateCaCertificate(objOld, objNew)
}

func (h genericCaCertificateHandler) Generic(object client.Object) error {
	obj, ok := object.(*gate_xdmybl_io_v1.CaCertificate)
	if !ok {
		return errors.Errorf("internal error: CaCertificate handler received event for %T", object)
	}
	return h.handler.GenericCaCertificate(obj)
}

// Handle events for the Certificate Resource
// DEPRECATED: Prefer reconciler pattern.
type CertificateEventHandler interface {
	CreateCertificate(obj *gate_xdmybl_io_v1.Certificate) error
	UpdateCertificate(old, new *gate_xdmybl_io_v1.Certificate) error
	DeleteCertificate(obj *gate_xdmybl_io_v1.Certificate) error
	GenericCertificate(obj *gate_xdmybl_io_v1.Certificate) error
}

type CertificateEventHandlerFuncs struct {
	OnCreate  func(obj *gate_xdmybl_io_v1.Certificate) error
	OnUpdate  func(old, new *gate_xdmybl_io_v1.Certificate) error
	OnDelete  func(obj *gate_xdmybl_io_v1.Certificate) error
	OnGeneric func(obj *gate_xdmybl_io_v1.Certificate) error
}

func (f *CertificateEventHandlerFuncs) CreateCertificate(obj *gate_xdmybl_io_v1.Certificate) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *CertificateEventHandlerFuncs) DeleteCertificate(obj *gate_xdmybl_io_v1.Certificate) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *CertificateEventHandlerFuncs) UpdateCertificate(objOld, objNew *gate_xdmybl_io_v1.Certificate) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *CertificateEventHandlerFuncs) GenericCertificate(obj *gate_xdmybl_io_v1.Certificate) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type CertificateEventWatcher interface {
	AddEventHandler(ctx context.Context, h CertificateEventHandler, predicates ...predicate.Predicate) error
}

type certificateEventWatcher struct {
	watcher events.EventWatcher
}

func NewCertificateEventWatcher(name string, mgr manager.Manager) CertificateEventWatcher {
	return &certificateEventWatcher{
		watcher: events.NewWatcher(name, mgr, &gate_xdmybl_io_v1.Certificate{}),
	}
}

func (c *certificateEventWatcher) AddEventHandler(ctx context.Context, h CertificateEventHandler, predicates ...predicate.Predicate) error {
	handler := genericCertificateHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericCertificateHandler implements a generic events.EventHandler
type genericCertificateHandler struct {
	handler CertificateEventHandler
}

func (h genericCertificateHandler) Create(object client.Object) error {
	obj, ok := object.(*gate_xdmybl_io_v1.Certificate)
	if !ok {
		return errors.Errorf("internal error: Certificate handler received event for %T", object)
	}
	return h.handler.CreateCertificate(obj)
}

func (h genericCertificateHandler) Delete(object client.Object) error {
	obj, ok := object.(*gate_xdmybl_io_v1.Certificate)
	if !ok {
		return errors.Errorf("internal error: Certificate handler received event for %T", object)
	}
	return h.handler.DeleteCertificate(obj)
}

func (h genericCertificateHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*gate_xdmybl_io_v1.Certificate)
	if !ok {
		return errors.Errorf("internal error: Certificate handler received event for %T", old)
	}
	objNew, ok := new.(*gate_xdmybl_io_v1.Certificate)
	if !ok {
		return errors.Errorf("internal error: Certificate handler received event for %T", new)
	}
	return h.handler.UpdateCertificate(objOld, objNew)
}

func (h genericCertificateHandler) Generic(object client.Object) error {
	obj, ok := object.(*gate_xdmybl_io_v1.Certificate)
	if !ok {
		return errors.Errorf("internal error: Certificate handler received event for %T", object)
	}
	return h.handler.GenericCertificate(obj)
}

// Handle events for the Upstream Resource
// DEPRECATED: Prefer reconciler pattern.
type UpstreamEventHandler interface {
	CreateUpstream(obj *gate_xdmybl_io_v1.Upstream) error
	UpdateUpstream(old, new *gate_xdmybl_io_v1.Upstream) error
	DeleteUpstream(obj *gate_xdmybl_io_v1.Upstream) error
	GenericUpstream(obj *gate_xdmybl_io_v1.Upstream) error
}

type UpstreamEventHandlerFuncs struct {
	OnCreate  func(obj *gate_xdmybl_io_v1.Upstream) error
	OnUpdate  func(old, new *gate_xdmybl_io_v1.Upstream) error
	OnDelete  func(obj *gate_xdmybl_io_v1.Upstream) error
	OnGeneric func(obj *gate_xdmybl_io_v1.Upstream) error
}

func (f *UpstreamEventHandlerFuncs) CreateUpstream(obj *gate_xdmybl_io_v1.Upstream) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *UpstreamEventHandlerFuncs) DeleteUpstream(obj *gate_xdmybl_io_v1.Upstream) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *UpstreamEventHandlerFuncs) UpdateUpstream(objOld, objNew *gate_xdmybl_io_v1.Upstream) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *UpstreamEventHandlerFuncs) GenericUpstream(obj *gate_xdmybl_io_v1.Upstream) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type UpstreamEventWatcher interface {
	AddEventHandler(ctx context.Context, h UpstreamEventHandler, predicates ...predicate.Predicate) error
}

type upstreamEventWatcher struct {
	watcher events.EventWatcher
}

func NewUpstreamEventWatcher(name string, mgr manager.Manager) UpstreamEventWatcher {
	return &upstreamEventWatcher{
		watcher: events.NewWatcher(name, mgr, &gate_xdmybl_io_v1.Upstream{}),
	}
}

func (c *upstreamEventWatcher) AddEventHandler(ctx context.Context, h UpstreamEventHandler, predicates ...predicate.Predicate) error {
	handler := genericUpstreamHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericUpstreamHandler implements a generic events.EventHandler
type genericUpstreamHandler struct {
	handler UpstreamEventHandler
}

func (h genericUpstreamHandler) Create(object client.Object) error {
	obj, ok := object.(*gate_xdmybl_io_v1.Upstream)
	if !ok {
		return errors.Errorf("internal error: Upstream handler received event for %T", object)
	}
	return h.handler.CreateUpstream(obj)
}

func (h genericUpstreamHandler) Delete(object client.Object) error {
	obj, ok := object.(*gate_xdmybl_io_v1.Upstream)
	if !ok {
		return errors.Errorf("internal error: Upstream handler received event for %T", object)
	}
	return h.handler.DeleteUpstream(obj)
}

func (h genericUpstreamHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*gate_xdmybl_io_v1.Upstream)
	if !ok {
		return errors.Errorf("internal error: Upstream handler received event for %T", old)
	}
	objNew, ok := new.(*gate_xdmybl_io_v1.Upstream)
	if !ok {
		return errors.Errorf("internal error: Upstream handler received event for %T", new)
	}
	return h.handler.UpdateUpstream(objOld, objNew)
}

func (h genericUpstreamHandler) Generic(object client.Object) error {
	obj, ok := object.(*gate_xdmybl_io_v1.Upstream)
	if !ok {
		return errors.Errorf("internal error: Upstream handler received event for %T", object)
	}
	return h.handler.GenericUpstream(obj)
}

// Handle events for the Gateway Resource
// DEPRECATED: Prefer reconciler pattern.
type GatewayEventHandler interface {
	CreateGateway(obj *gate_xdmybl_io_v1.Gateway) error
	UpdateGateway(old, new *gate_xdmybl_io_v1.Gateway) error
	DeleteGateway(obj *gate_xdmybl_io_v1.Gateway) error
	GenericGateway(obj *gate_xdmybl_io_v1.Gateway) error
}

type GatewayEventHandlerFuncs struct {
	OnCreate  func(obj *gate_xdmybl_io_v1.Gateway) error
	OnUpdate  func(old, new *gate_xdmybl_io_v1.Gateway) error
	OnDelete  func(obj *gate_xdmybl_io_v1.Gateway) error
	OnGeneric func(obj *gate_xdmybl_io_v1.Gateway) error
}

func (f *GatewayEventHandlerFuncs) CreateGateway(obj *gate_xdmybl_io_v1.Gateway) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *GatewayEventHandlerFuncs) DeleteGateway(obj *gate_xdmybl_io_v1.Gateway) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *GatewayEventHandlerFuncs) UpdateGateway(objOld, objNew *gate_xdmybl_io_v1.Gateway) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *GatewayEventHandlerFuncs) GenericGateway(obj *gate_xdmybl_io_v1.Gateway) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type GatewayEventWatcher interface {
	AddEventHandler(ctx context.Context, h GatewayEventHandler, predicates ...predicate.Predicate) error
}

type gatewayEventWatcher struct {
	watcher events.EventWatcher
}

func NewGatewayEventWatcher(name string, mgr manager.Manager) GatewayEventWatcher {
	return &gatewayEventWatcher{
		watcher: events.NewWatcher(name, mgr, &gate_xdmybl_io_v1.Gateway{}),
	}
}

func (c *gatewayEventWatcher) AddEventHandler(ctx context.Context, h GatewayEventHandler, predicates ...predicate.Predicate) error {
	handler := genericGatewayHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericGatewayHandler implements a generic events.EventHandler
type genericGatewayHandler struct {
	handler GatewayEventHandler
}

func (h genericGatewayHandler) Create(object client.Object) error {
	obj, ok := object.(*gate_xdmybl_io_v1.Gateway)
	if !ok {
		return errors.Errorf("internal error: Gateway handler received event for %T", object)
	}
	return h.handler.CreateGateway(obj)
}

func (h genericGatewayHandler) Delete(object client.Object) error {
	obj, ok := object.(*gate_xdmybl_io_v1.Gateway)
	if !ok {
		return errors.Errorf("internal error: Gateway handler received event for %T", object)
	}
	return h.handler.DeleteGateway(obj)
}

func (h genericGatewayHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*gate_xdmybl_io_v1.Gateway)
	if !ok {
		return errors.Errorf("internal error: Gateway handler received event for %T", old)
	}
	objNew, ok := new.(*gate_xdmybl_io_v1.Gateway)
	if !ok {
		return errors.Errorf("internal error: Gateway handler received event for %T", new)
	}
	return h.handler.UpdateGateway(objOld, objNew)
}

func (h genericGatewayHandler) Generic(object client.Object) error {
	obj, ok := object.(*gate_xdmybl_io_v1.Gateway)
	if !ok {
		return errors.Errorf("internal error: Gateway handler received event for %T", object)
	}
	return h.handler.GenericGateway(obj)
}

// Handle events for the Filter Resource
// DEPRECATED: Prefer reconciler pattern.
type FilterEventHandler interface {
	CreateFilter(obj *gate_xdmybl_io_v1.Filter) error
	UpdateFilter(old, new *gate_xdmybl_io_v1.Filter) error
	DeleteFilter(obj *gate_xdmybl_io_v1.Filter) error
	GenericFilter(obj *gate_xdmybl_io_v1.Filter) error
}

type FilterEventHandlerFuncs struct {
	OnCreate  func(obj *gate_xdmybl_io_v1.Filter) error
	OnUpdate  func(old, new *gate_xdmybl_io_v1.Filter) error
	OnDelete  func(obj *gate_xdmybl_io_v1.Filter) error
	OnGeneric func(obj *gate_xdmybl_io_v1.Filter) error
}

func (f *FilterEventHandlerFuncs) CreateFilter(obj *gate_xdmybl_io_v1.Filter) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *FilterEventHandlerFuncs) DeleteFilter(obj *gate_xdmybl_io_v1.Filter) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *FilterEventHandlerFuncs) UpdateFilter(objOld, objNew *gate_xdmybl_io_v1.Filter) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *FilterEventHandlerFuncs) GenericFilter(obj *gate_xdmybl_io_v1.Filter) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type FilterEventWatcher interface {
	AddEventHandler(ctx context.Context, h FilterEventHandler, predicates ...predicate.Predicate) error
}

type filterEventWatcher struct {
	watcher events.EventWatcher
}

func NewFilterEventWatcher(name string, mgr manager.Manager) FilterEventWatcher {
	return &filterEventWatcher{
		watcher: events.NewWatcher(name, mgr, &gate_xdmybl_io_v1.Filter{}),
	}
}

func (c *filterEventWatcher) AddEventHandler(ctx context.Context, h FilterEventHandler, predicates ...predicate.Predicate) error {
	handler := genericFilterHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericFilterHandler implements a generic events.EventHandler
type genericFilterHandler struct {
	handler FilterEventHandler
}

func (h genericFilterHandler) Create(object client.Object) error {
	obj, ok := object.(*gate_xdmybl_io_v1.Filter)
	if !ok {
		return errors.Errorf("internal error: Filter handler received event for %T", object)
	}
	return h.handler.CreateFilter(obj)
}

func (h genericFilterHandler) Delete(object client.Object) error {
	obj, ok := object.(*gate_xdmybl_io_v1.Filter)
	if !ok {
		return errors.Errorf("internal error: Filter handler received event for %T", object)
	}
	return h.handler.DeleteFilter(obj)
}

func (h genericFilterHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*gate_xdmybl_io_v1.Filter)
	if !ok {
		return errors.Errorf("internal error: Filter handler received event for %T", old)
	}
	objNew, ok := new.(*gate_xdmybl_io_v1.Filter)
	if !ok {
		return errors.Errorf("internal error: Filter handler received event for %T", new)
	}
	return h.handler.UpdateFilter(objOld, objNew)
}

func (h genericFilterHandler) Generic(object client.Object) error {
	obj, ok := object.(*gate_xdmybl_io_v1.Filter)
	if !ok {
		return errors.Errorf("internal error: Filter handler received event for %T", object)
	}
	return h.handler.GenericFilter(obj)
}
