// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/xdmybl/gate-type/proto/gate/v1/gateway.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *GatewaySpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GatewaySpec)
	if !ok {
		that2, ok := that.(GatewaySpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCommonInfo()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommonInfo()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommonInfo(), target.GetCommonInfo()) {
			return false
		}
	}

	if len(m.GetListeners()) != len(target.GetListeners()) {
		return false
	}
	for idx, v := range m.GetListeners() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetListeners()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetListeners()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *GatewayListener) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GatewayListener)
	if !ok {
		that2, ok := that.(GatewayListener)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetBindAddress(), target.GetBindAddress()) != 0 {
		return false
	}

	if m.GetBindPort() != target.GetBindPort() {
		return false
	}

	if m.GetBindToPort() != target.GetBindToPort() {
		return false
	}

	if len(m.GetFilterName()) != len(target.GetFilterName()) {
		return false
	}
	for idx, v := range m.GetFilterName() {

		if strings.Compare(v, target.GetFilterName()[idx]) != 0 {
			return false
		}

	}

	if h, ok := interface{}(m.GetOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetOptions(), target.GetOptions()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMetadata()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetadata()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetadata(), target.GetMetadata()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ListenerOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListenerOptions)
	if !ok {
		that2, ok := that.(ListenerOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetPerConnectionBufferLimitBytes() != target.GetPerConnectionBufferLimitBytes() {
		return false
	}

	return true
}
