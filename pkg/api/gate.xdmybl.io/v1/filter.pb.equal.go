// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/xdmybl/gate-type/proto/gate/v1/filter.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *FilterSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*FilterSpec)
	if !ok {
		that2, ok := that.(FilterSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCommonInfo()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommonInfo()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommonInfo(), target.GetCommonInfo()) {
			return false
		}
	}

	switch m.FilterType.(type) {

	case *FilterSpec_Hcm:
		if _, ok := target.FilterType.(*FilterSpec_Hcm); !ok {
			return false
		}

		if h, ok := interface{}(m.GetHcm()).(equality.Equalizer); ok {
			if !h.Equal(target.GetHcm()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetHcm(), target.GetHcm()) {
				return false
			}
		}

	case *FilterSpec_TcpProxy:
		if _, ok := target.FilterType.(*FilterSpec_TcpProxy); !ok {
			return false
		}

		if h, ok := interface{}(m.GetTcpProxy()).(equality.Equalizer); ok {
			if !h.Equal(target.GetTcpProxy()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetTcpProxy(), target.GetTcpProxy()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.FilterType != target.FilterType {
			return false
		}
	}

	return true
}

// Equal function
func (m *HttpConnectionManager) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HttpConnectionManager)
	if !ok {
		that2, ok := that.(HttpConnectionManager)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRouteConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRouteConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRouteConfig(), target.GetRouteConfig()) {
			return false
		}
	}

	if len(m.GetHttpFilter()) != len(target.GetHttpFilter()) {
		return false
	}
	for idx, v := range m.GetHttpFilter() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetHttpFilter()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetHttpFilter()[idx]) {
				return false
			}
		}

	}

	if m.GetMergeSlashes() != target.GetMergeSlashes() {
		return false
	}

	if m.GetSkipXffAppend() != target.GetSkipXffAppend() {
		return false
	}

	return true
}

// Equal function
func (m *RouteConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteConfig)
	if !ok {
		that2, ok := that.(RouteConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if len(m.GetVhostLs()) != len(target.GetVhostLs()) {
		return false
	}
	for idx, v := range m.GetVhostLs() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetVhostLs()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetVhostLs()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetHeaderManipulation()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHeaderManipulation()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHeaderManipulation(), target.GetHeaderManipulation()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *VHost) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*VHost)
	if !ok {
		that2, ok := that.(VHost)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetRouteLs()) != len(target.GetRouteLs()) {
		return false
	}
	for idx, v := range m.GetRouteLs() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetRouteLs()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetRouteLs()[idx]) {
				return false
			}
		}

	}

	if len(m.GetDomains()) != len(target.GetDomains()) {
		return false
	}
	for idx, v := range m.GetDomains() {

		if strings.Compare(v, target.GetDomains()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *Route) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Route)
	if !ok {
		that2, ok := that.(Route)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetId() != target.GetId() {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetMatch()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMatch()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMatch(), target.GetMatch()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetHeaderManipulation()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHeaderManipulation()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHeaderManipulation(), target.GetHeaderManipulation()) {
			return false
		}
	}

	switch m.RouteActionType.(type) {

	case *Route_ForwardAction:
		if _, ok := target.RouteActionType.(*Route_ForwardAction); !ok {
			return false
		}

		if h, ok := interface{}(m.GetForwardAction()).(equality.Equalizer); ok {
			if !h.Equal(target.GetForwardAction()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetForwardAction(), target.GetForwardAction()) {
				return false
			}
		}

	case *Route_RedirectAction:
		if _, ok := target.RouteActionType.(*Route_RedirectAction); !ok {
			return false
		}

		if h, ok := interface{}(m.GetRedirectAction()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRedirectAction()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRedirectAction(), target.GetRedirectAction()) {
				return false
			}
		}

	case *Route_DirectionAction:
		if _, ok := target.RouteActionType.(*Route_DirectionAction); !ok {
			return false
		}

		if h, ok := interface{}(m.GetDirectionAction()).(equality.Equalizer); ok {
			if !h.Equal(target.GetDirectionAction()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetDirectionAction(), target.GetDirectionAction()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.RouteActionType != target.RouteActionType {
			return false
		}
	}

	return true
}

// Equal function
func (m *ForwardAction) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ForwardAction)
	if !ok {
		that2, ok := that.(ForwardAction)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetWeightClusterLs()) != len(target.GetWeightClusterLs()) {
		return false
	}
	for idx, v := range m.GetWeightClusterLs() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetWeightClusterLs()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetWeightClusterLs()[idx]) {
				return false
			}
		}

	}

	if m.GetTimeout() != target.GetTimeout() {
		return false
	}

	return true
}

// Equal function
func (m *RedirectAction) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RedirectAction)
	if !ok {
		that2, ok := that.(RedirectAction)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetHostRedirect(), target.GetHostRedirect()) != 0 {
		return false
	}

	if m.GetResponseCode() != target.GetResponseCode() {
		return false
	}

	if m.GetHttpsRedirect() != target.GetHttpsRedirect() {
		return false
	}

	if m.GetStripQuery() != target.GetStripQuery() {
		return false
	}

	if m.GetPortRedirect() != target.GetPortRedirect() {
		return false
	}

	return true
}

// Equal function
func (m *DirectionAction) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DirectionAction)
	if !ok {
		that2, ok := that.(DirectionAction)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetStatusCode() != target.GetStatusCode() {
		return false
	}

	if strings.Compare(m.GetBody(), target.GetBody()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *RouteMatch) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RouteMatch)
	if !ok {
		that2, ok := that.(RouteMatch)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetPrefix(), target.GetPrefix()) != 0 {
		return false
	}

	if strings.Compare(m.GetPath(), target.GetPath()) != 0 {
		return false
	}

	if strings.Compare(m.GetRegex(), target.GetRegex()) != 0 {
		return false
	}

	if len(m.GetHeaders()) != len(target.GetHeaders()) {
		return false
	}
	for idx, v := range m.GetHeaders() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetHeaders()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetHeaders()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *HeaderMatch) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HeaderMatch)
	if !ok {
		that2, ok := that.(HeaderMatch)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetExact(), target.GetExact()) != 0 {
		return false
	}

	if strings.Compare(m.GetPrefix(), target.GetPrefix()) != 0 {
		return false
	}

	if strings.Compare(m.GetRegex(), target.GetRegex()) != 0 {
		return false
	}

	if strings.Compare(m.GetContains(), target.GetContains()) != 0 {
		return false
	}

	if m.GetInvert() != target.GetInvert() {
		return false
	}

	return true
}

// Equal function
func (m *WeightCluster) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*WeightCluster)
	if !ok {
		that2, ok := that.(WeightCluster)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetClusterName()) != len(target.GetClusterName()) {
		return false
	}
	for idx, v := range m.GetClusterName() {

		if strings.Compare(v, target.GetClusterName()[idx]) != 0 {
			return false
		}

	}

	if m.GetTotalWeight() != target.GetTotalWeight() {
		return false
	}

	return true
}

// Equal function
func (m *HttpFilter) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*HttpFilter)
	if !ok {
		that2, ok := that.(HttpFilter)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *TcpProxy) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*TcpProxy)
	if !ok {
		that2, ok := that.(TcpProxy)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}
