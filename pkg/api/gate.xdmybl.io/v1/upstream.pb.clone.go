// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/xdmybl/gate-type/proto/gate/v1/upstream.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_xdmybl_gate_type_pkg_api_common_v1 "github.com/xdmybl/gate-type/pkg/api/common/v1"

	github_com_xdmybl_gate_type_pkg_api_core_v1 "github.com/xdmybl/gate-type/pkg/api/core/v1"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *UpstreamSpec) Clone() proto.Message {
	var target *UpstreamSpec
	if m == nil {
		return target
	}
	target = &UpstreamSpec{}

	if h, ok := interface{}(m.GetCommonInfo()).(clone.Cloner); ok {
		target.CommonInfo = h.Clone().(*github_com_xdmybl_gate_type_pkg_api_core_v1.CommonInfo)
	} else {
		target.CommonInfo = proto.Clone(m.GetCommonInfo()).(*github_com_xdmybl_gate_type_pkg_api_core_v1.CommonInfo)
	}

	target.LbAlg = m.GetLbAlg()

	if h, ok := interface{}(m.GetSslConfigurations()).(clone.Cloner); ok {
		target.SslConfigurations = h.Clone().(*github_com_xdmybl_gate_type_pkg_api_common_v1.TlsClient)
	} else {
		target.SslConfigurations = proto.Clone(m.GetSslConfigurations()).(*github_com_xdmybl_gate_type_pkg_api_common_v1.TlsClient)
	}

	if h, ok := interface{}(m.GetConnPoll()).(clone.Cloner); ok {
		target.ConnPoll = h.Clone().(*ConnPoll)
	} else {
		target.ConnPoll = proto.Clone(m.GetConnPoll()).(*ConnPoll)
	}

	target.HcInterval = m.GetHcInterval()

	target.HcTimeout = m.GetHcTimeout()

	target.HcHealthyThreshold = m.GetHcHealthyThreshold()

	target.HcUnhealthyThreshold = m.GetHcUnhealthyThreshold()

	if h, ok := interface{}(m.GetHcSpecifier()).(clone.Cloner); ok {
		target.HcSpecifier = h.Clone().(*HealthCheckSpecifier)
	} else {
		target.HcSpecifier = proto.Clone(m.GetHcSpecifier()).(*HealthCheckSpecifier)
	}

	if h, ok := interface{}(m.GetStatefulSession()).(clone.Cloner); ok {
		target.StatefulSession = h.Clone().(*github_com_xdmybl_gate_type_pkg_api_core_v1.StatefulSession)
	} else {
		target.StatefulSession = proto.Clone(m.GetStatefulSession()).(*github_com_xdmybl_gate_type_pkg_api_core_v1.StatefulSession)
	}

	if m.GetEndpoints() != nil {
		target.Endpoints = make([]*github_com_xdmybl_gate_type_pkg_api_core_v1.Endpoint, len(m.GetEndpoints()))
		for idx, v := range m.GetEndpoints() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Endpoints[idx] = h.Clone().(*github_com_xdmybl_gate_type_pkg_api_core_v1.Endpoint)
			} else {
				target.Endpoints[idx] = proto.Clone(v).(*github_com_xdmybl_gate_type_pkg_api_core_v1.Endpoint)
			}

		}
	}

	return target
}

// Clone function
func (m *ConnPoll) Clone() proto.Message {
	var target *ConnPoll
	if m == nil {
		return target
	}
	target = &ConnPoll{}

	target.MaxRequestsPerConnection = m.GetMaxRequestsPerConnection()

	target.MaxConnections = m.GetMaxConnections()

	target.MaxRequests = m.GetMaxRequests()

	target.MaxPendingRequests = m.GetMaxPendingRequests()

	target.OutboundSourceAddress = m.GetOutboundSourceAddress()

	return target
}

// Clone function
func (m *WeightedUpstreamList) Clone() proto.Message {
	var target *WeightedUpstreamList
	if m == nil {
		return target
	}
	target = &WeightedUpstreamList{}

	target.Weight = m.GetWeight()

	if h, ok := interface{}(m.GetUpstreamRef()).(clone.Cloner); ok {
		target.UpstreamRef = h.Clone().(*github_com_xdmybl_gate_type_pkg_api_core_v1.ResourceRef)
	} else {
		target.UpstreamRef = proto.Clone(m.GetUpstreamRef()).(*github_com_xdmybl_gate_type_pkg_api_core_v1.ResourceRef)
	}

	if h, ok := interface{}(m.GetHeaderManipulation()).(clone.Cloner); ok {
		target.HeaderManipulation = h.Clone().(*github_com_xdmybl_gate_type_pkg_api_core_v1.HeaderManipulation)
	} else {
		target.HeaderManipulation = proto.Clone(m.GetHeaderManipulation()).(*github_com_xdmybl_gate_type_pkg_api_core_v1.HeaderManipulation)
	}

	return target
}

// Clone function
func (m *TcpHealthCheck) Clone() proto.Message {
	var target *TcpHealthCheck
	if m == nil {
		return target
	}
	target = &TcpHealthCheck{}

	target.SendPayload = m.GetSendPayload()

	if m.GetReceivePayload() != nil {
		target.ReceivePayload = make([]string, len(m.GetReceivePayload()))
		for idx, v := range m.GetReceivePayload() {

			target.ReceivePayload[idx] = v

		}
	}

	return target
}

// Clone function
func (m *HttpHealthCheck) Clone() proto.Message {
	var target *HttpHealthCheck
	if m == nil {
		return target
	}
	target = &HttpHealthCheck{}

	target.Host = m.GetHost()

	target.Path = m.GetPath()

	target.Method = m.GetMethod()

	if m.GetExpectedStatuses() != nil {
		target.ExpectedStatuses = make([]uint32, len(m.GetExpectedStatuses()))
		for idx, v := range m.GetExpectedStatuses() {

			target.ExpectedStatuses[idx] = v

		}
	}

	target.ClientType = m.GetClientType()

	return target
}

// Clone function
func (m *HealthCheckSpecifier) Clone() proto.Message {
	var target *HealthCheckSpecifier
	if m == nil {
		return target
	}
	target = &HealthCheckSpecifier{}

	target.Type = m.GetType()

	if h, ok := interface{}(m.GetTcpHealthCheck()).(clone.Cloner); ok {
		target.TcpHealthCheck = h.Clone().(*TcpHealthCheck)
	} else {
		target.TcpHealthCheck = proto.Clone(m.GetTcpHealthCheck()).(*TcpHealthCheck)
	}

	if h, ok := interface{}(m.GetHttpHealthCheck()).(clone.Cloner); ok {
		target.HttpHealthCheck = h.Clone().(*HttpHealthCheck)
	} else {
		target.HttpHealthCheck = proto.Clone(m.GetHttpHealthCheck()).(*HttpHealthCheck)
	}

	return target
}
