// 对应 cds 这一层一层

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: github.com/xdmybl/gate-type/proto/gate/v1/upstream.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v11 "github.com/xdmybl/gate-type/pkg/api/common/v1"
	v1 "github.com/xdmybl/gate-type/pkg/api/core/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpstreamSpec_LbPolicy int32

const (
	// Refer to the :ref:`round robin load balancing
	// policy<arch_overview_load_balancing_types_round_robin>`
	// for an explanation.
	UpstreamSpec_ROUND_ROBIN UpstreamSpec_LbPolicy = 0
	// Refer to the :ref:`least request load balancing
	// policy<arch_overview_load_balancing_types_least_request>`
	// for an explanation.
	UpstreamSpec_LEAST_REQUEST UpstreamSpec_LbPolicy = 1
	// Refer to the :ref:`ring hash load balancing
	// policy<arch_overview_load_balancing_types_ring_hash>`
	// for an explanation.
	UpstreamSpec_RING_HASH UpstreamSpec_LbPolicy = 2
	// Refer to the :ref:`random load balancing
	// policy<arch_overview_load_balancing_types_random>`
	// for an explanation.
	UpstreamSpec_RANDOM UpstreamSpec_LbPolicy = 3
	// Refer to the :ref:`Maglev load balancing policy<arch_overview_load_balancing_types_maglev>`
	// for an explanation.
	UpstreamSpec_MAGLEV UpstreamSpec_LbPolicy = 5
)

// Enum value maps for UpstreamSpec_LbPolicy.
var (
	UpstreamSpec_LbPolicy_name = map[int32]string{
		0: "ROUND_ROBIN",
		1: "LEAST_REQUEST",
		2: "RING_HASH",
		3: "RANDOM",
		5: "MAGLEV",
	}
	UpstreamSpec_LbPolicy_value = map[string]int32{
		"ROUND_ROBIN":   0,
		"LEAST_REQUEST": 1,
		"RING_HASH":     2,
		"RANDOM":        3,
		"MAGLEV":        5,
	}
)

func (x UpstreamSpec_LbPolicy) Enum() *UpstreamSpec_LbPolicy {
	p := new(UpstreamSpec_LbPolicy)
	*p = x
	return p
}

func (x UpstreamSpec_LbPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpstreamSpec_LbPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_enumTypes[0].Descriptor()
}

func (UpstreamSpec_LbPolicy) Type() protoreflect.EnumType {
	return &file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_enumTypes[0]
}

func (x UpstreamSpec_LbPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpstreamSpec_LbPolicy.Descriptor instead.
func (UpstreamSpec_LbPolicy) EnumDescriptor() ([]byte, []int) {
	return file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDescGZIP(), []int{0, 0}
}

type HealthCheckSpecifier_Type int32

const (
	HealthCheckSpecifier_UNKNOWN HealthCheckSpecifier_Type = 0
	HealthCheckSpecifier_TCP     HealthCheckSpecifier_Type = 1
	HealthCheckSpecifier_HTTP    HealthCheckSpecifier_Type = 2
)

// Enum value maps for HealthCheckSpecifier_Type.
var (
	HealthCheckSpecifier_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "TCP",
		2: "HTTP",
	}
	HealthCheckSpecifier_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"TCP":     1,
		"HTTP":    2,
	}
)

func (x HealthCheckSpecifier_Type) Enum() *HealthCheckSpecifier_Type {
	p := new(HealthCheckSpecifier_Type)
	*p = x
	return p
}

func (x HealthCheckSpecifier_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheckSpecifier_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_enumTypes[1].Descriptor()
}

func (HealthCheckSpecifier_Type) Type() protoreflect.EnumType {
	return &file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_enumTypes[1]
}

func (x HealthCheckSpecifier_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheckSpecifier_Type.Descriptor instead.
func (HealthCheckSpecifier_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDescGZIP(), []int{5, 0}
}

type UpstreamSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonInfo        *v1.CommonInfo        `protobuf:"bytes,1,opt,name=commonInfo,proto3" json:"commonInfo,omitempty"`
	LbAlg             UpstreamSpec_LbPolicy `protobuf:"varint,2,opt,name=lbAlg,proto3,enum=gate.xdmybl.io.UpstreamSpec_LbPolicy" json:"lbAlg,omitempty"`
	SslConfigurations *v11.TlsClient        `protobuf:"bytes,3,opt,name=sslConfigurations,proto3" json:"sslConfigurations,omitempty"`
	ConnPoll          *ConnPoll             `protobuf:"bytes,4,opt,name=connPoll,proto3" json:"connPoll,omitempty"`
	// health check interval
	HcInterval uint32 `protobuf:"varint,5,opt,name=hcInterval,proto3" json:"hcInterval,omitempty"`
	HcTimeout  uint32 `protobuf:"varint,6,opt,name=hcTimeout,proto3" json:"hcTimeout,omitempty"`
	// hc 健康阈值
	HcHealthyThreshold   uint32                `protobuf:"varint,7,opt,name=hcHealthyThreshold,proto3" json:"hcHealthyThreshold,omitempty"`
	HcUnhealthyThreshold uint32                `protobuf:"varint,8,opt,name=hcUnhealthyThreshold,proto3" json:"hcUnhealthyThreshold,omitempty"`
	HcSpecifier          *HealthCheckSpecifier `protobuf:"bytes,9,opt,name=hcSpecifier,proto3" json:"hcSpecifier,omitempty"`
	StatefulSession      *v1.StatefulSession   `protobuf:"bytes,10,opt,name=statefulSession,proto3" json:"statefulSession,omitempty"`
	Endpoints            []*v1.Endpoint        `protobuf:"bytes,11,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (x *UpstreamSpec) Reset() {
	*x = UpstreamSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamSpec) ProtoMessage() {}

func (x *UpstreamSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamSpec.ProtoReflect.Descriptor instead.
func (*UpstreamSpec) Descriptor() ([]byte, []int) {
	return file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDescGZIP(), []int{0}
}

func (x *UpstreamSpec) GetCommonInfo() *v1.CommonInfo {
	if x != nil {
		return x.CommonInfo
	}
	return nil
}

func (x *UpstreamSpec) GetLbAlg() UpstreamSpec_LbPolicy {
	if x != nil {
		return x.LbAlg
	}
	return UpstreamSpec_ROUND_ROBIN
}

func (x *UpstreamSpec) GetSslConfigurations() *v11.TlsClient {
	if x != nil {
		return x.SslConfigurations
	}
	return nil
}

func (x *UpstreamSpec) GetConnPoll() *ConnPoll {
	if x != nil {
		return x.ConnPoll
	}
	return nil
}

func (x *UpstreamSpec) GetHcInterval() uint32 {
	if x != nil {
		return x.HcInterval
	}
	return 0
}

func (x *UpstreamSpec) GetHcTimeout() uint32 {
	if x != nil {
		return x.HcTimeout
	}
	return 0
}

func (x *UpstreamSpec) GetHcHealthyThreshold() uint32 {
	if x != nil {
		return x.HcHealthyThreshold
	}
	return 0
}

func (x *UpstreamSpec) GetHcUnhealthyThreshold() uint32 {
	if x != nil {
		return x.HcUnhealthyThreshold
	}
	return 0
}

func (x *UpstreamSpec) GetHcSpecifier() *HealthCheckSpecifier {
	if x != nil {
		return x.HcSpecifier
	}
	return nil
}

func (x *UpstreamSpec) GetStatefulSession() *v1.StatefulSession {
	if x != nil {
		return x.StatefulSession
	}
	return nil
}

func (x *UpstreamSpec) GetEndpoints() []*v1.Endpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

type ConnPoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxRequestsPerConnection uint32 `protobuf:"varint,1,opt,name=maxRequestsPerConnection,proto3" json:"maxRequestsPerConnection,omitempty"`
	// 访问该集群的最大发连接数，默认值-1 (2^32-1 = 4294967295)。
	MaxConnections int64 `protobuf:"varint,2,opt,name=maxConnections,proto3" json:"maxConnections,omitempty"`
	MaxRequests    int64 `protobuf:"varint,3,opt,name=maxRequests,proto3" json:"maxRequests,omitempty"`
	// 最大阻塞的请求数，默认值-1(2^32-1)。
	MaxPendingRequests    int64  `protobuf:"varint,4,opt,name=maxPendingRequests,proto3" json:"maxPendingRequests,omitempty"`
	OutboundSourceAddress string `protobuf:"bytes,5,opt,name=outboundSourceAddress,proto3" json:"outboundSourceAddress,omitempty"`
}

func (x *ConnPoll) Reset() {
	*x = ConnPoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnPoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnPoll) ProtoMessage() {}

func (x *ConnPoll) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnPoll.ProtoReflect.Descriptor instead.
func (*ConnPoll) Descriptor() ([]byte, []int) {
	return file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDescGZIP(), []int{1}
}

func (x *ConnPoll) GetMaxRequestsPerConnection() uint32 {
	if x != nil {
		return x.MaxRequestsPerConnection
	}
	return 0
}

func (x *ConnPoll) GetMaxConnections() int64 {
	if x != nil {
		return x.MaxConnections
	}
	return 0
}

func (x *ConnPoll) GetMaxRequests() int64 {
	if x != nil {
		return x.MaxRequests
	}
	return 0
}

func (x *ConnPoll) GetMaxPendingRequests() int64 {
	if x != nil {
		return x.MaxPendingRequests
	}
	return 0
}

func (x *ConnPoll) GetOutboundSourceAddress() string {
	if x != nil {
		return x.OutboundSourceAddress
	}
	return ""
}

type WeightedUpstreamList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight             uint32                 `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	UpstreamRef        *v1.ResourceRef        `protobuf:"bytes,2,opt,name=upstreamRef,proto3" json:"upstreamRef,omitempty"`
	HeaderManipulation *v1.HeaderManipulation `protobuf:"bytes,3,opt,name=headerManipulation,proto3" json:"headerManipulation,omitempty"`
}

func (x *WeightedUpstreamList) Reset() {
	*x = WeightedUpstreamList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightedUpstreamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedUpstreamList) ProtoMessage() {}

func (x *WeightedUpstreamList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedUpstreamList.ProtoReflect.Descriptor instead.
func (*WeightedUpstreamList) Descriptor() ([]byte, []int) {
	return file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDescGZIP(), []int{2}
}

func (x *WeightedUpstreamList) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *WeightedUpstreamList) GetUpstreamRef() *v1.ResourceRef {
	if x != nil {
		return x.UpstreamRef
	}
	return nil
}

func (x *WeightedUpstreamList) GetHeaderManipulation() *v1.HeaderManipulation {
	if x != nil {
		return x.HeaderManipulation
	}
	return nil
}

type TcpHealthCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendPayload    string   `protobuf:"bytes,1,opt,name=sendPayload,proto3" json:"sendPayload,omitempty"`
	ReceivePayload []string `protobuf:"bytes,2,rep,name=receivePayload,proto3" json:"receivePayload,omitempty"`
}

func (x *TcpHealthCheck) Reset() {
	*x = TcpHealthCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpHealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpHealthCheck) ProtoMessage() {}

func (x *TcpHealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpHealthCheck.ProtoReflect.Descriptor instead.
func (*TcpHealthCheck) Descriptor() ([]byte, []int) {
	return file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDescGZIP(), []int{3}
}

func (x *TcpHealthCheck) GetSendPayload() string {
	if x != nil {
		return x.SendPayload
	}
	return ""
}

func (x *TcpHealthCheck) GetReceivePayload() []string {
	if x != nil {
		return x.ReceivePayload
	}
	return nil
}

type HttpHealthCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host             string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Path             string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Method           string   `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	ExpectedStatuses []uint32 `protobuf:"varint,4,rep,packed,name=expectedStatuses,proto3" json:"expectedStatuses,omitempty"`
	ClientType       string   `protobuf:"bytes,5,opt,name=ClientType,proto3" json:"ClientType,omitempty"`
}

func (x *HttpHealthCheck) Reset() {
	*x = HttpHealthCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpHealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHealthCheck) ProtoMessage() {}

func (x *HttpHealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHealthCheck.ProtoReflect.Descriptor instead.
func (*HttpHealthCheck) Descriptor() ([]byte, []int) {
	return file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDescGZIP(), []int{4}
}

func (x *HttpHealthCheck) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HttpHealthCheck) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HttpHealthCheck) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HttpHealthCheck) GetExpectedStatuses() []uint32 {
	if x != nil {
		return x.ExpectedStatuses
	}
	return nil
}

func (x *HttpHealthCheck) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

// https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/health_check.proto#config-core-v3-healthcheck
type HealthCheckSpecifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            HealthCheckSpecifier_Type `protobuf:"varint,1,opt,name=type,proto3,enum=gate.xdmybl.io.HealthCheckSpecifier_Type" json:"type,omitempty"`
	TcpHealthCheck  *TcpHealthCheck           `protobuf:"bytes,2,opt,name=tcpHealthCheck,proto3" json:"tcpHealthCheck,omitempty"`
	HttpHealthCheck *HttpHealthCheck          `protobuf:"bytes,3,opt,name=httpHealthCheck,proto3" json:"httpHealthCheck,omitempty"`
}

func (x *HealthCheckSpecifier) Reset() {
	*x = HealthCheckSpecifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckSpecifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckSpecifier) ProtoMessage() {}

func (x *HealthCheckSpecifier) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckSpecifier.ProtoReflect.Descriptor instead.
func (*HealthCheckSpecifier) Descriptor() ([]byte, []int) {
	return file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDescGZIP(), []int{5}
}

func (x *HealthCheckSpecifier) GetType() HealthCheckSpecifier_Type {
	if x != nil {
		return x.Type
	}
	return HealthCheckSpecifier_UNKNOWN
}

func (x *HealthCheckSpecifier) GetTcpHealthCheck() *TcpHealthCheck {
	if x != nil {
		return x.TcpHealthCheck
	}
	return nil
}

func (x *HealthCheckSpecifier) GetHttpHealthCheck() *HttpHealthCheck {
	if x != nil {
		return x.HttpHealthCheck
	}
	return nil
}

var File_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto protoreflect.FileDescriptor

var file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDesc = []byte{
	0x0a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x64, 0x6d,
	0x79, 0x62, 0x6c, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x67, 0x61, 0x74, 0x65,
	0x2e, 0x78, 0x64, 0x6d, 0x79, 0x62, 0x6c, 0x2e, 0x69, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6c, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x05, 0x0a, 0x0c, 0x55, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x45, 0x0a, 0x05, 0x6c, 0x62, 0x41, 0x6c, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x78, 0x64, 0x6d, 0x79, 0x62, 0x6c, 0x2e, 0x69, 0x6f, 0x2e,
	0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x62, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x05, 0x6c, 0x62, 0x41, 0x6c, 0x67, 0x12, 0x42, 0x0a, 0x11, 0x73, 0x73, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6c,
	0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x73, 0x73, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x6e, 0x50, 0x6f, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x2e, 0x78, 0x64, 0x6d, 0x79, 0x62, 0x6c, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x50, 0x6f, 0x6c, 0x6c,
	0x12, 0x27, 0x0a, 0x0a, 0x68, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x68,
	0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x09, 0x68, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x2a, 0x02, 0x28, 0x05, 0x52, 0x09, 0x68, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x37, 0x0a, 0x12, 0x68, 0x63, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x2a, 0x02, 0x28, 0x01, 0x52, 0x12, 0x68, 0x63, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x14, 0x68, 0x63, 0x55,
	0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x01,
	0x52, 0x14, 0x68, 0x63, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x68, 0x63, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x2e, 0x78, 0x64, 0x6d, 0x79, 0x62, 0x6c, 0x2e, 0x69, 0x6f, 0x2e, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0b, 0x68, 0x63, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x42,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04,
	0x08, 0x01, 0x10, 0x40, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22,
	0x5b, 0x0a, 0x08, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x42, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41,
	0x47, 0x4c, 0x45, 0x56, 0x10, 0x05, 0x22, 0x04, 0x08, 0x04, 0x10, 0x04, 0x22, 0xca, 0x02, 0x0a,
	0x08, 0x43, 0x6f, 0x6e, 0x6e, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x3a, 0x0a, 0x18, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x16, 0xfa,
	0x42, 0x13, 0x22, 0x11, 0x10, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x28, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x16, 0xfa, 0x42, 0x13, 0x22,
	0x11, 0x10, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x28, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x46, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x16, 0xfa, 0x42, 0x13,
	0x22, 0x11, 0x10, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x28, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x70, 0x01, 0xd0,
	0x01, 0x01, 0x52, 0x15, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0b,
	0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x55, 0x0a, 0x12, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x12,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x54, 0x63, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x1b, 0x72,
	0x19, 0x32, 0x14, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x31, 0x2c, 0x35, 0x31, 0x32, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x1e, 0xfa, 0x42, 0x1b, 0x72, 0x19, 0x32, 0x14, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x46,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x2c, 0x35, 0x31, 0x32, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0x52,
	0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x8d, 0x02, 0x0a, 0x0f, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xc0, 0x01, 0x02, 0xc8, 0x01, 0x00, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x20, 0x01, 0xc0, 0x01, 0x02, 0xc8, 0x01,
	0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xfa, 0x42, 0x23, 0x72, 0x21, 0x52, 0x03,
	0x47, 0x45, 0x54, 0x52, 0x04, 0x48, 0x45, 0x41, 0x44, 0x52, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x52,
	0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x52, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x41, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x42, 0x15, 0xfa, 0x42, 0x12, 0x92, 0x01, 0x0f, 0x10, 0x08, 0x18, 0x01, 0x22, 0x07, 0x2a,
	0x05, 0x10, 0xd8, 0x04, 0x28, 0x64, 0x28, 0x01, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xfa, 0x42, 0x10, 0x72, 0x0e, 0x52, 0x05, 0x48, 0x54, 0x54, 0x50, 0x31, 0x52, 0x05, 0x48, 0x54,
	0x54, 0x50, 0x32, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x9a, 0x02, 0x0a, 0x14, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x78, 0x64,
	0x6d, 0x79, 0x62, 0x6c, 0x2e, 0x69, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x46, 0x0a, 0x0e, 0x74, 0x63, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x2e, 0x78, 0x64, 0x6d, 0x79, 0x62, 0x6c, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x63, 0x70, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x49, 0x0a, 0x0f, 0x68, 0x74, 0x74,
	0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x78, 0x64, 0x6d, 0x79, 0x62, 0x6c,
	0x2e, 0x69, 0x6f, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x22, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x02, 0x42, 0x43, 0x5a, 0x35,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x64, 0x6d, 0x79, 0x62,
	0x6c, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x78, 0x64, 0x6d, 0x79, 0x62, 0x6c, 0x2e,
	0x69, 0x6f, 0x2f, 0x76, 0x31, 0xc0, 0xf5, 0x04, 0x01, 0xb8, 0xf5, 0x04, 0x01, 0xd0, 0xf5, 0x04,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDescOnce sync.Once
	file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDescData = file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDesc
)

func file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDescGZIP() []byte {
	file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDescOnce.Do(func() {
		file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDescData)
	})
	return file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDescData
}

var file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_goTypes = []interface{}{
	(UpstreamSpec_LbPolicy)(0),     // 0: gate.xdmybl.io.UpstreamSpec.LbPolicy
	(HealthCheckSpecifier_Type)(0), // 1: gate.xdmybl.io.HealthCheckSpecifier.Type
	(*UpstreamSpec)(nil),           // 2: gate.xdmybl.io.UpstreamSpec
	(*ConnPoll)(nil),               // 3: gate.xdmybl.io.ConnPoll
	(*WeightedUpstreamList)(nil),   // 4: gate.xdmybl.io.WeightedUpstreamList
	(*TcpHealthCheck)(nil),         // 5: gate.xdmybl.io.TcpHealthCheck
	(*HttpHealthCheck)(nil),        // 6: gate.xdmybl.io.HttpHealthCheck
	(*HealthCheckSpecifier)(nil),   // 7: gate.xdmybl.io.HealthCheckSpecifier
	(*v1.CommonInfo)(nil),          // 8: core.v1.CommonInfo
	(*v11.TlsClient)(nil),          // 9: common.v1.TlsClient
	(*v1.StatefulSession)(nil),     // 10: core.v1.StatefulSession
	(*v1.Endpoint)(nil),            // 11: core.v1.Endpoint
	(*v1.ResourceRef)(nil),         // 12: core.v1.ResourceRef
	(*v1.HeaderManipulation)(nil),  // 13: core.v1.HeaderManipulation
}
var file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_depIdxs = []int32{
	8,  // 0: gate.xdmybl.io.UpstreamSpec.commonInfo:type_name -> core.v1.CommonInfo
	0,  // 1: gate.xdmybl.io.UpstreamSpec.lbAlg:type_name -> gate.xdmybl.io.UpstreamSpec.LbPolicy
	9,  // 2: gate.xdmybl.io.UpstreamSpec.sslConfigurations:type_name -> common.v1.TlsClient
	3,  // 3: gate.xdmybl.io.UpstreamSpec.connPoll:type_name -> gate.xdmybl.io.ConnPoll
	7,  // 4: gate.xdmybl.io.UpstreamSpec.hcSpecifier:type_name -> gate.xdmybl.io.HealthCheckSpecifier
	10, // 5: gate.xdmybl.io.UpstreamSpec.statefulSession:type_name -> core.v1.StatefulSession
	11, // 6: gate.xdmybl.io.UpstreamSpec.endpoints:type_name -> core.v1.Endpoint
	12, // 7: gate.xdmybl.io.WeightedUpstreamList.upstreamRef:type_name -> core.v1.ResourceRef
	13, // 8: gate.xdmybl.io.WeightedUpstreamList.headerManipulation:type_name -> core.v1.HeaderManipulation
	1,  // 9: gate.xdmybl.io.HealthCheckSpecifier.type:type_name -> gate.xdmybl.io.HealthCheckSpecifier.Type
	5,  // 10: gate.xdmybl.io.HealthCheckSpecifier.tcpHealthCheck:type_name -> gate.xdmybl.io.TcpHealthCheck
	6,  // 11: gate.xdmybl.io.HealthCheckSpecifier.httpHealthCheck:type_name -> gate.xdmybl.io.HttpHealthCheck
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_init() }
func file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_init() {
	if File_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnPoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeightedUpstreamList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpHealthCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpHealthCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckSpecifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_goTypes,
		DependencyIndexes: file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_depIdxs,
		EnumInfos:         file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_enumTypes,
		MessageInfos:      file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_msgTypes,
	}.Build()
	File_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto = out.File
	file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_rawDesc = nil
	file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_goTypes = nil
	file_github_com_xdmybl_gate_type_proto_gate_v1_upstream_proto_depIdxs = nil
}
