// Code generated by engine gate build no edit

package v1

import (
	gate_xdmybl_io_v1 "github.com/xdmybl/gate-type/pkg/api/gate.xdmybl.io/v1"

	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for CaCertificateClient from Clientset
func CaCertificateClientFromClientsetProvider(clients gate_xdmybl_io_v1.Clientset) gate_xdmybl_io_v1.CaCertificateClient {
	return clients.CaCertificates()
}

// Provider for CaCertificate Client from Client
func CaCertificateClientProvider(client client.Client) gate_xdmybl_io_v1.CaCertificateClient {
	return gate_xdmybl_io_v1.NewCaCertificateClient(client)
}

type CaCertificateClientFactory func(client client.Client) gate_xdmybl_io_v1.CaCertificateClient

func CaCertificateClientFactoryProvider() CaCertificateClientFactory {
	return CaCertificateClientProvider
}

type CaCertificateClientFromConfigFactory func(cfg *rest.Config) (gate_xdmybl_io_v1.CaCertificateClient, error)

func CaCertificateClientFromConfigFactoryProvider() CaCertificateClientFromConfigFactory {
	return func(cfg *rest.Config) (gate_xdmybl_io_v1.CaCertificateClient, error) {
		clients, err := gate_xdmybl_io_v1.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.CaCertificates(), nil
	}
}

// Provider for SslCertificateClient from Clientset
func SslCertificateClientFromClientsetProvider(clients gate_xdmybl_io_v1.Clientset) gate_xdmybl_io_v1.SslCertificateClient {
	return clients.SslCertificates()
}

// Provider for SslCertificate Client from Client
func SslCertificateClientProvider(client client.Client) gate_xdmybl_io_v1.SslCertificateClient {
	return gate_xdmybl_io_v1.NewSslCertificateClient(client)
}

type SslCertificateClientFactory func(client client.Client) gate_xdmybl_io_v1.SslCertificateClient

func SslCertificateClientFactoryProvider() SslCertificateClientFactory {
	return SslCertificateClientProvider
}

type SslCertificateClientFromConfigFactory func(cfg *rest.Config) (gate_xdmybl_io_v1.SslCertificateClient, error)

func SslCertificateClientFromConfigFactoryProvider() SslCertificateClientFromConfigFactory {
	return func(cfg *rest.Config) (gate_xdmybl_io_v1.SslCertificateClient, error) {
		clients, err := gate_xdmybl_io_v1.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.SslCertificates(), nil
	}
}

// Provider for UpstreamClient from Clientset
func UpstreamClientFromClientsetProvider(clients gate_xdmybl_io_v1.Clientset) gate_xdmybl_io_v1.UpstreamClient {
	return clients.Upstreams()
}

// Provider for Upstream Client from Client
func UpstreamClientProvider(client client.Client) gate_xdmybl_io_v1.UpstreamClient {
	return gate_xdmybl_io_v1.NewUpstreamClient(client)
}

type UpstreamClientFactory func(client client.Client) gate_xdmybl_io_v1.UpstreamClient

func UpstreamClientFactoryProvider() UpstreamClientFactory {
	return UpstreamClientProvider
}

type UpstreamClientFromConfigFactory func(cfg *rest.Config) (gate_xdmybl_io_v1.UpstreamClient, error)

func UpstreamClientFromConfigFactoryProvider() UpstreamClientFromConfigFactory {
	return func(cfg *rest.Config) (gate_xdmybl_io_v1.UpstreamClient, error) {
		clients, err := gate_xdmybl_io_v1.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.Upstreams(), nil
	}
}

// Provider for GatewayClient from Clientset
func GatewayClientFromClientsetProvider(clients gate_xdmybl_io_v1.Clientset) gate_xdmybl_io_v1.GatewayClient {
	return clients.Gateways()
}

// Provider for Gateway Client from Client
func GatewayClientProvider(client client.Client) gate_xdmybl_io_v1.GatewayClient {
	return gate_xdmybl_io_v1.NewGatewayClient(client)
}

type GatewayClientFactory func(client client.Client) gate_xdmybl_io_v1.GatewayClient

func GatewayClientFactoryProvider() GatewayClientFactory {
	return GatewayClientProvider
}

type GatewayClientFromConfigFactory func(cfg *rest.Config) (gate_xdmybl_io_v1.GatewayClient, error)

func GatewayClientFromConfigFactoryProvider() GatewayClientFromConfigFactory {
	return func(cfg *rest.Config) (gate_xdmybl_io_v1.GatewayClient, error) {
		clients, err := gate_xdmybl_io_v1.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.Gateways(), nil
	}
}

// Provider for FilterClient from Clientset
func FilterClientFromClientsetProvider(clients gate_xdmybl_io_v1.Clientset) gate_xdmybl_io_v1.FilterClient {
	return clients.Filters()
}

// Provider for Filter Client from Client
func FilterClientProvider(client client.Client) gate_xdmybl_io_v1.FilterClient {
	return gate_xdmybl_io_v1.NewFilterClient(client)
}

type FilterClientFactory func(client client.Client) gate_xdmybl_io_v1.FilterClient

func FilterClientFactoryProvider() FilterClientFactory {
	return FilterClientProvider
}

type FilterClientFromConfigFactory func(cfg *rest.Config) (gate_xdmybl_io_v1.FilterClient, error)

func FilterClientFromConfigFactoryProvider() FilterClientFromConfigFactory {
	return func(cfg *rest.Config) (gate_xdmybl_io_v1.FilterClient, error) {
		clients, err := gate_xdmybl_io_v1.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.Filters(), nil
	}
}
