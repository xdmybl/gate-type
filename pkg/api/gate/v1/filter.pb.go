// 对应 envoy 的 filter 对象, 链接 https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener_components.proto#config-listener-v3-filter
// 定义这些对象有两种通用的思路:
// 1. 照搬相应的对象, 比如说 filter 是之前

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: github.com/xdmybl/gate-type/proto/gate/v1/filter.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v1 "github.com/xdmybl/gate-type/pkg/api/core/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// directly map to the Envoy v3 filter object
// 只好先用着 envoy 的名称, 其实 filter 是一个基于功能的取名
// 并不是基于概念的取名, 这里后期必然要换一个名
type FilterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// common fields
	CommonInfo *v1.CommonInfo `protobuf:"bytes,1,opt,name=commonInfo,proto3" json:"commonInfo,omitempty"`
	// 必为其中一种类型, 目前计划先支持两种, Tcp Http 协议的处理
	//
	// Types that are assignable to FilterType:
	//
	//	*FilterSpec_Hcm
	//	*FilterSpec_TcpProxy
	FilterType isFilterSpec_FilterType `protobuf_oneof:"filter_type"`
}

func (x *FilterSpec) Reset() {
	*x = FilterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterSpec) ProtoMessage() {}

func (x *FilterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterSpec.ProtoReflect.Descriptor instead.
func (*FilterSpec) Descriptor() ([]byte, []int) {
	return file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_rawDescGZIP(), []int{0}
}

func (x *FilterSpec) GetCommonInfo() *v1.CommonInfo {
	if x != nil {
		return x.CommonInfo
	}
	return nil
}

func (m *FilterSpec) GetFilterType() isFilterSpec_FilterType {
	if m != nil {
		return m.FilterType
	}
	return nil
}

func (x *FilterSpec) GetHcm() *HttpConnectionManager {
	if x, ok := x.GetFilterType().(*FilterSpec_Hcm); ok {
		return x.Hcm
	}
	return nil
}

func (x *FilterSpec) GetTcpProxy() *TcpProxy {
	if x, ok := x.GetFilterType().(*FilterSpec_TcpProxy); ok {
		return x.TcpProxy
	}
	return nil
}

type isFilterSpec_FilterType interface {
	isFilterSpec_FilterType()
}

type FilterSpec_Hcm struct {
	Hcm *HttpConnectionManager `protobuf:"bytes,2,opt,name=hcm,proto3,oneof"`
}

type FilterSpec_TcpProxy struct {
	TcpProxy *TcpProxy `protobuf:"bytes,3,opt,name=tcp_proxy,json=tcpProxy,proto3,oneof"`
}

func (*FilterSpec_Hcm) isFilterSpec_FilterType() {}

func (*FilterSpec_TcpProxy) isFilterSpec_FilterType() {}

// Hcm 直接对应 Envoy HCM
type HttpConnectionManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 对应 Envoy route_config_name
	RouteConfigName string        `protobuf:"bytes,1,opt,name=route_config_name,json=routeConfigName,proto3" json:"route_config_name,omitempty"`
	HttpFilter      []*HttpFilter `protobuf:"bytes,2,rep,name=http_filter,json=httpFilter,proto3" json:"http_filter,omitempty"`
	MergeSlashes    bool          `protobuf:"varint,3,opt,name=merge_slashes,json=mergeSlashes,proto3" json:"merge_slashes,omitempty"`
	SkipXffAppend   bool          `protobuf:"varint,4,opt,name=skip_xff_append,json=skipXffAppend,proto3" json:"skip_xff_append,omitempty"`
}

func (x *HttpConnectionManager) Reset() {
	*x = HttpConnectionManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpConnectionManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpConnectionManager) ProtoMessage() {}

func (x *HttpConnectionManager) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpConnectionManager.ProtoReflect.Descriptor instead.
func (*HttpConnectionManager) Descriptor() ([]byte, []int) {
	return file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_rawDescGZIP(), []int{1}
}

func (x *HttpConnectionManager) GetRouteConfigName() string {
	if x != nil {
		return x.RouteConfigName
	}
	return ""
}

func (x *HttpConnectionManager) GetHttpFilter() []*HttpFilter {
	if x != nil {
		return x.HttpFilter
	}
	return nil
}

func (x *HttpConnectionManager) GetMergeSlashes() bool {
	if x != nil {
		return x.MergeSlashes
	}
	return false
}

func (x *HttpConnectionManager) GetSkipXffAppend() bool {
	if x != nil {
		return x.SkipXffAppend
	}
	return false
}

// TODO 插件  HCM 级别插件配置
// 生成规则 HCM 级别插件规则需要看 Envoy 文档才能知道
type HttpFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HttpFilter) Reset() {
	*x = HttpFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpFilter) ProtoMessage() {}

func (x *HttpFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpFilter.ProtoReflect.Descriptor instead.
func (*HttpFilter) Descriptor() ([]byte, []int) {
	return file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_rawDescGZIP(), []int{2}
}

// Envoy 的 extensions.filters.network.tcp_proxy.v3.TcpProxy 是一个网络过滤器，它可以在 Envoy 代理中拦截 TCP 流量，并将其转发到指定的目标地址。具体来说，TcpProxy 可以在客户端和服务端之间建立一个 TCP 连接，然后将客户端发送的请求转发到服务端，同时将服务端返回的响应转发回客户端。
// TcpProxy 过滤器可以用于实现负载均衡、流量控制、故障转移等功能，它支持多种负载均衡算法和健康检查机制，可以根据配置文件中的规则动态地选择目标地址，并在目标地址不可用时自动切换到备用地址。
// 总之，TcpProxy 是一个非常有用的 Envoy 过滤器，可以帮助开发人员更好地控制和管理 Envoy 代理中的 TCP 流量。
//   - `stat_prefix`：用于在 Envoy 的统计信息中标识该 TCP 代理的前缀。
//   - `cluster`：指定要代理到的目标集群的名称。
//   - `access_log`：指定要记录访问日志的配置。
//   - `idle_timeout`：指定连接的空闲超时时间。
//   - `max_connect_attempts`：指定连接重试的最大次数。
//   - `upstream_connection_options`：指定要应用的上游连接选项。
//   - `downstream_connection_options`：指定要应用的下游连接选项。
//   - `hash_policy`：指定用于哈希负载均衡的策略。
//   - `metadata_match`：指定要匹配的元数据标签。
type TcpProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TcpProxy) Reset() {
	*x = TcpProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpProxy) ProtoMessage() {}

func (x *TcpProxy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpProxy.ProtoReflect.Descriptor instead.
func (*TcpProxy) Descriptor() ([]byte, []int) {
	return file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_rawDescGZIP(), []int{3}
}

var File_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto protoreflect.FileDescriptor

var file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_rawDesc = []byte{
	0x0a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x64, 0x6d,
	0x79, 0x62, 0x6c, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x67, 0x61, 0x74, 0x65, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x03, 0x68, 0x63, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x03, 0x68, 0x63, 0x6d, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x63, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x12, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x15,
	0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x6c,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x78, 0x66, 0x66, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x58, 0x66, 0x66, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x22, 0x0c, 0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x0a, 0x0a, 0x08, 0x54, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x39, 0x5a, 0x2b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x64, 0x6d, 0x79, 0x62, 0x6c,
	0x2f, 0x67, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0xc0, 0xf5, 0x04, 0x01, 0xb8, 0xf5,
	0x04, 0x01, 0xd0, 0xf5, 0x04, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_rawDescOnce sync.Once
	file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_rawDescData = file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_rawDesc
)

func file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_rawDescGZIP() []byte {
	file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_rawDescOnce.Do(func() {
		file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_rawDescData)
	})
	return file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_rawDescData
}

var file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_goTypes = []interface{}{
	(*FilterSpec)(nil),            // 0: gate.FilterSpec
	(*HttpConnectionManager)(nil), // 1: gate.HttpConnectionManager
	(*HttpFilter)(nil),            // 2: gate.HttpFilter
	(*TcpProxy)(nil),              // 3: gate.TcpProxy
	(*v1.CommonInfo)(nil),         // 4: core.v1.CommonInfo
}
var file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_depIdxs = []int32{
	4, // 0: gate.FilterSpec.commonInfo:type_name -> core.v1.CommonInfo
	1, // 1: gate.FilterSpec.hcm:type_name -> gate.HttpConnectionManager
	3, // 2: gate.FilterSpec.tcp_proxy:type_name -> gate.TcpProxy
	2, // 3: gate.HttpConnectionManager.http_filter:type_name -> gate.HttpFilter
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_init() }
func file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_init() {
	if File_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpConnectionManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*FilterSpec_Hcm)(nil),
		(*FilterSpec_TcpProxy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_goTypes,
		DependencyIndexes: file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_depIdxs,
		MessageInfos:      file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_msgTypes,
	}.Build()
	File_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto = out.File
	file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_rawDesc = nil
	file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_goTypes = nil
	file_github_com_xdmybl_gate_type_proto_gate_v1_filter_proto_depIdxs = nil
}
