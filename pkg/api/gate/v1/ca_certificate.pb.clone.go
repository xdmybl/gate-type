// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/xdmybl/gate-type/proto/gate/v1/ca_certificate.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_xdmybl_gate_type_pkg_api_common_v1 "github.com/xdmybl/gate-type/pkg/api/common/v1"

	github_com_xdmybl_gate_type_pkg_api_core_v1 "github.com/xdmybl/gate-type/pkg/api/core/v1"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *CaCertificateSpec) Clone() proto.Message {
	var target *CaCertificateSpec
	if m == nil {
		return target
	}
	target = &CaCertificateSpec{}

	if h, ok := interface{}(m.GetCommonInfo()).(clone.Cloner); ok {
		target.CommonInfo = h.Clone().(*github_com_xdmybl_gate_type_pkg_api_core_v1.CommonInfo)
	} else {
		target.CommonInfo = proto.Clone(m.GetCommonInfo()).(*github_com_xdmybl_gate_type_pkg_api_core_v1.CommonInfo)
	}

	if h, ok := interface{}(m.GetCertificateInfo()).(clone.Cloner); ok {
		target.CertificateInfo = h.Clone().(*github_com_xdmybl_gate_type_pkg_api_common_v1.Certificate)
	} else {
		target.CertificateInfo = proto.Clone(m.GetCertificateInfo()).(*github_com_xdmybl_gate_type_pkg_api_common_v1.Certificate)
	}

	target.Ca = m.GetCa()

	target.Crl = m.GetCrl()

	target.AllowExpiredCertificate = m.GetAllowExpiredCertificate()

	if h, ok := interface{}(m.GetTlsParameters()).(clone.Cloner); ok {
		target.TlsParameters = h.Clone().(*github_com_xdmybl_gate_type_pkg_api_common_v1.TlsParameters)
	} else {
		target.TlsParameters = proto.Clone(m.GetTlsParameters()).(*github_com_xdmybl_gate_type_pkg_api_common_v1.TlsParameters)
	}

	if m.GetAlpnProtocols() != nil {
		target.AlpnProtocols = make([]string, len(m.GetAlpnProtocols()))
		for idx, v := range m.GetAlpnProtocols() {

			target.AlpnProtocols[idx] = v

		}
	}

	return target
}
