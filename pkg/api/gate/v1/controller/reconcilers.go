// Code generated by engine gate build no edit

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	gate_v1 "github.com/xdmybl/gate-type/pkg/api/gate/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the CaCertificate Resource.
// implemented by the user
type CaCertificateReconciler interface {
	ReconcileCaCertificate(obj *gate_v1.CaCertificate) (reconcile.Result, error)
}

// Reconcile deletion events for the CaCertificate Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type CaCertificateDeletionReconciler interface {
	ReconcileCaCertificateDeletion(req reconcile.Request) error
}

type CaCertificateReconcilerFuncs struct {
	OnReconcileCaCertificate         func(obj *gate_v1.CaCertificate) (reconcile.Result, error)
	OnReconcileCaCertificateDeletion func(req reconcile.Request) error
}

func (f *CaCertificateReconcilerFuncs) ReconcileCaCertificate(obj *gate_v1.CaCertificate) (reconcile.Result, error) {
	if f.OnReconcileCaCertificate == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileCaCertificate(obj)
}

func (f *CaCertificateReconcilerFuncs) ReconcileCaCertificateDeletion(req reconcile.Request) error {
	if f.OnReconcileCaCertificateDeletion == nil {
		return nil
	}
	return f.OnReconcileCaCertificateDeletion(req)
}

// Reconcile and finalize the CaCertificate Resource
// implemented by the user
type CaCertificateFinalizer interface {
	CaCertificateReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	CaCertificateFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeCaCertificate(obj *gate_v1.CaCertificate) error
}

type CaCertificateReconcileLoop interface {
	RunCaCertificateReconciler(ctx context.Context, rec CaCertificateReconciler, predicates ...predicate.Predicate) error
}

type caCertificateReconcileLoop struct {
	loop reconcile.Loop
}

func NewCaCertificateReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) CaCertificateReconcileLoop {
	return &caCertificateReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &gate_v1.CaCertificate{}, options),
	}
}

func (c *caCertificateReconcileLoop) RunCaCertificateReconciler(ctx context.Context, reconciler CaCertificateReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericCaCertificateReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(CaCertificateFinalizer); ok {
		reconcilerWrapper = genericCaCertificateFinalizer{
			genericCaCertificateReconciler: genericReconciler,
			finalizingReconciler:           finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericCaCertificateHandler implements a generic reconcile.Reconciler
type genericCaCertificateReconciler struct {
	reconciler CaCertificateReconciler
}

func (r genericCaCertificateReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*gate_v1.CaCertificate)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: CaCertificate handler received event for %T", object)
	}
	return r.reconciler.ReconcileCaCertificate(obj)
}

func (r genericCaCertificateReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(CaCertificateDeletionReconciler); ok {
		return deletionReconciler.ReconcileCaCertificateDeletion(request)
	}
	return nil
}

// genericCaCertificateFinalizer implements a generic reconcile.FinalizingReconciler
type genericCaCertificateFinalizer struct {
	genericCaCertificateReconciler
	finalizingReconciler CaCertificateFinalizer
}

func (r genericCaCertificateFinalizer) FinalizerName() string {
	return r.finalizingReconciler.CaCertificateFinalizerName()
}

func (r genericCaCertificateFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*gate_v1.CaCertificate)
	if !ok {
		return errors.Errorf("internal error: CaCertificate handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeCaCertificate(obj)
}

// Reconcile Upsert events for the SslCertificate Resource.
// implemented by the user
type SslCertificateReconciler interface {
	ReconcileSslCertificate(obj *gate_v1.SslCertificate) (reconcile.Result, error)
}

// Reconcile deletion events for the SslCertificate Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type SslCertificateDeletionReconciler interface {
	ReconcileSslCertificateDeletion(req reconcile.Request) error
}

type SslCertificateReconcilerFuncs struct {
	OnReconcileSslCertificate         func(obj *gate_v1.SslCertificate) (reconcile.Result, error)
	OnReconcileSslCertificateDeletion func(req reconcile.Request) error
}

func (f *SslCertificateReconcilerFuncs) ReconcileSslCertificate(obj *gate_v1.SslCertificate) (reconcile.Result, error) {
	if f.OnReconcileSslCertificate == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileSslCertificate(obj)
}

func (f *SslCertificateReconcilerFuncs) ReconcileSslCertificateDeletion(req reconcile.Request) error {
	if f.OnReconcileSslCertificateDeletion == nil {
		return nil
	}
	return f.OnReconcileSslCertificateDeletion(req)
}

// Reconcile and finalize the SslCertificate Resource
// implemented by the user
type SslCertificateFinalizer interface {
	SslCertificateReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	SslCertificateFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeSslCertificate(obj *gate_v1.SslCertificate) error
}

type SslCertificateReconcileLoop interface {
	RunSslCertificateReconciler(ctx context.Context, rec SslCertificateReconciler, predicates ...predicate.Predicate) error
}

type sslCertificateReconcileLoop struct {
	loop reconcile.Loop
}

func NewSslCertificateReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) SslCertificateReconcileLoop {
	return &sslCertificateReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &gate_v1.SslCertificate{}, options),
	}
}

func (c *sslCertificateReconcileLoop) RunSslCertificateReconciler(ctx context.Context, reconciler SslCertificateReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericSslCertificateReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(SslCertificateFinalizer); ok {
		reconcilerWrapper = genericSslCertificateFinalizer{
			genericSslCertificateReconciler: genericReconciler,
			finalizingReconciler:            finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericSslCertificateHandler implements a generic reconcile.Reconciler
type genericSslCertificateReconciler struct {
	reconciler SslCertificateReconciler
}

func (r genericSslCertificateReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*gate_v1.SslCertificate)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: SslCertificate handler received event for %T", object)
	}
	return r.reconciler.ReconcileSslCertificate(obj)
}

func (r genericSslCertificateReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(SslCertificateDeletionReconciler); ok {
		return deletionReconciler.ReconcileSslCertificateDeletion(request)
	}
	return nil
}

// genericSslCertificateFinalizer implements a generic reconcile.FinalizingReconciler
type genericSslCertificateFinalizer struct {
	genericSslCertificateReconciler
	finalizingReconciler SslCertificateFinalizer
}

func (r genericSslCertificateFinalizer) FinalizerName() string {
	return r.finalizingReconciler.SslCertificateFinalizerName()
}

func (r genericSslCertificateFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*gate_v1.SslCertificate)
	if !ok {
		return errors.Errorf("internal error: SslCertificate handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeSslCertificate(obj)
}
