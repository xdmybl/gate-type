// Code generated by engine gate build no edit

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	gate_v1 "github.com/xdmybl/gate-type/pkg/api/gate/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the CaCertificate Resource
// DEPRECATED: Prefer reconciler pattern.
type CaCertificateEventHandler interface {
	CreateCaCertificate(obj *gate_v1.CaCertificate) error
	UpdateCaCertificate(old, new *gate_v1.CaCertificate) error
	DeleteCaCertificate(obj *gate_v1.CaCertificate) error
	GenericCaCertificate(obj *gate_v1.CaCertificate) error
}

type CaCertificateEventHandlerFuncs struct {
	OnCreate  func(obj *gate_v1.CaCertificate) error
	OnUpdate  func(old, new *gate_v1.CaCertificate) error
	OnDelete  func(obj *gate_v1.CaCertificate) error
	OnGeneric func(obj *gate_v1.CaCertificate) error
}

func (f *CaCertificateEventHandlerFuncs) CreateCaCertificate(obj *gate_v1.CaCertificate) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *CaCertificateEventHandlerFuncs) DeleteCaCertificate(obj *gate_v1.CaCertificate) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *CaCertificateEventHandlerFuncs) UpdateCaCertificate(objOld, objNew *gate_v1.CaCertificate) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *CaCertificateEventHandlerFuncs) GenericCaCertificate(obj *gate_v1.CaCertificate) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type CaCertificateEventWatcher interface {
	AddEventHandler(ctx context.Context, h CaCertificateEventHandler, predicates ...predicate.Predicate) error
}

type caCertificateEventWatcher struct {
	watcher events.EventWatcher
}

func NewCaCertificateEventWatcher(name string, mgr manager.Manager) CaCertificateEventWatcher {
	return &caCertificateEventWatcher{
		watcher: events.NewWatcher(name, mgr, &gate_v1.CaCertificate{}),
	}
}

func (c *caCertificateEventWatcher) AddEventHandler(ctx context.Context, h CaCertificateEventHandler, predicates ...predicate.Predicate) error {
	handler := genericCaCertificateHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericCaCertificateHandler implements a generic events.EventHandler
type genericCaCertificateHandler struct {
	handler CaCertificateEventHandler
}

func (h genericCaCertificateHandler) Create(object client.Object) error {
	obj, ok := object.(*gate_v1.CaCertificate)
	if !ok {
		return errors.Errorf("internal error: CaCertificate handler received event for %T", object)
	}
	return h.handler.CreateCaCertificate(obj)
}

func (h genericCaCertificateHandler) Delete(object client.Object) error {
	obj, ok := object.(*gate_v1.CaCertificate)
	if !ok {
		return errors.Errorf("internal error: CaCertificate handler received event for %T", object)
	}
	return h.handler.DeleteCaCertificate(obj)
}

func (h genericCaCertificateHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*gate_v1.CaCertificate)
	if !ok {
		return errors.Errorf("internal error: CaCertificate handler received event for %T", old)
	}
	objNew, ok := new.(*gate_v1.CaCertificate)
	if !ok {
		return errors.Errorf("internal error: CaCertificate handler received event for %T", new)
	}
	return h.handler.UpdateCaCertificate(objOld, objNew)
}

func (h genericCaCertificateHandler) Generic(object client.Object) error {
	obj, ok := object.(*gate_v1.CaCertificate)
	if !ok {
		return errors.Errorf("internal error: CaCertificate handler received event for %T", object)
	}
	return h.handler.GenericCaCertificate(obj)
}

// Handle events for the SslCertificate Resource
// DEPRECATED: Prefer reconciler pattern.
type SslCertificateEventHandler interface {
	CreateSslCertificate(obj *gate_v1.SslCertificate) error
	UpdateSslCertificate(old, new *gate_v1.SslCertificate) error
	DeleteSslCertificate(obj *gate_v1.SslCertificate) error
	GenericSslCertificate(obj *gate_v1.SslCertificate) error
}

type SslCertificateEventHandlerFuncs struct {
	OnCreate  func(obj *gate_v1.SslCertificate) error
	OnUpdate  func(old, new *gate_v1.SslCertificate) error
	OnDelete  func(obj *gate_v1.SslCertificate) error
	OnGeneric func(obj *gate_v1.SslCertificate) error
}

func (f *SslCertificateEventHandlerFuncs) CreateSslCertificate(obj *gate_v1.SslCertificate) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *SslCertificateEventHandlerFuncs) DeleteSslCertificate(obj *gate_v1.SslCertificate) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *SslCertificateEventHandlerFuncs) UpdateSslCertificate(objOld, objNew *gate_v1.SslCertificate) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *SslCertificateEventHandlerFuncs) GenericSslCertificate(obj *gate_v1.SslCertificate) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type SslCertificateEventWatcher interface {
	AddEventHandler(ctx context.Context, h SslCertificateEventHandler, predicates ...predicate.Predicate) error
}

type sslCertificateEventWatcher struct {
	watcher events.EventWatcher
}

func NewSslCertificateEventWatcher(name string, mgr manager.Manager) SslCertificateEventWatcher {
	return &sslCertificateEventWatcher{
		watcher: events.NewWatcher(name, mgr, &gate_v1.SslCertificate{}),
	}
}

func (c *sslCertificateEventWatcher) AddEventHandler(ctx context.Context, h SslCertificateEventHandler, predicates ...predicate.Predicate) error {
	handler := genericSslCertificateHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericSslCertificateHandler implements a generic events.EventHandler
type genericSslCertificateHandler struct {
	handler SslCertificateEventHandler
}

func (h genericSslCertificateHandler) Create(object client.Object) error {
	obj, ok := object.(*gate_v1.SslCertificate)
	if !ok {
		return errors.Errorf("internal error: SslCertificate handler received event for %T", object)
	}
	return h.handler.CreateSslCertificate(obj)
}

func (h genericSslCertificateHandler) Delete(object client.Object) error {
	obj, ok := object.(*gate_v1.SslCertificate)
	if !ok {
		return errors.Errorf("internal error: SslCertificate handler received event for %T", object)
	}
	return h.handler.DeleteSslCertificate(obj)
}

func (h genericSslCertificateHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*gate_v1.SslCertificate)
	if !ok {
		return errors.Errorf("internal error: SslCertificate handler received event for %T", old)
	}
	objNew, ok := new.(*gate_v1.SslCertificate)
	if !ok {
		return errors.Errorf("internal error: SslCertificate handler received event for %T", new)
	}
	return h.handler.UpdateSslCertificate(objOld, objNew)
}

func (h genericSslCertificateHandler) Generic(object client.Object) error {
	obj, ok := object.(*gate_v1.SslCertificate)
	if !ok {
		return errors.Errorf("internal error: SslCertificate handler received event for %T", object)
	}
	return h.handler.GenericSslCertificate(obj)
}
