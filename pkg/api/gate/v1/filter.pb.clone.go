// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/xdmybl/gate-type/proto/gate/v1/filter.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_xdmybl_gate_type_pkg_api_core_v1 "github.com/xdmybl/gate-type/pkg/api/core/v1"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *FilterSpec) Clone() proto.Message {
	var target *FilterSpec
	if m == nil {
		return target
	}
	target = &FilterSpec{}

	if h, ok := interface{}(m.GetCommonInfo()).(clone.Cloner); ok {
		target.CommonInfo = h.Clone().(*github_com_xdmybl_gate_type_pkg_api_core_v1.CommonInfo)
	} else {
		target.CommonInfo = proto.Clone(m.GetCommonInfo()).(*github_com_xdmybl_gate_type_pkg_api_core_v1.CommonInfo)
	}

	switch m.FilterType.(type) {

	case *FilterSpec_Hcm:

		if h, ok := interface{}(m.GetHcm()).(clone.Cloner); ok {
			target.FilterType = &FilterSpec_Hcm{
				Hcm: h.Clone().(*HttpConnectionManager),
			}
		} else {
			target.FilterType = &FilterSpec_Hcm{
				Hcm: proto.Clone(m.GetHcm()).(*HttpConnectionManager),
			}
		}

	case *FilterSpec_TcpProxy:

		if h, ok := interface{}(m.GetTcpProxy()).(clone.Cloner); ok {
			target.FilterType = &FilterSpec_TcpProxy{
				TcpProxy: h.Clone().(*TcpProxy),
			}
		} else {
			target.FilterType = &FilterSpec_TcpProxy{
				TcpProxy: proto.Clone(m.GetTcpProxy()).(*TcpProxy),
			}
		}

	}

	return target
}

// Clone function
func (m *HttpConnectionManager) Clone() proto.Message {
	var target *HttpConnectionManager
	if m == nil {
		return target
	}
	target = &HttpConnectionManager{}

	target.RouteConfigName = m.GetRouteConfigName()

	if m.GetHttpFilter() != nil {
		target.HttpFilter = make([]*HttpFilter, len(m.GetHttpFilter()))
		for idx, v := range m.GetHttpFilter() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.HttpFilter[idx] = h.Clone().(*HttpFilter)
			} else {
				target.HttpFilter[idx] = proto.Clone(v).(*HttpFilter)
			}

		}
	}

	target.MergeSlashes = m.GetMergeSlashes()

	target.SkipXffAppend = m.GetSkipXffAppend()

	return target
}

// Clone function
func (m *HttpFilter) Clone() proto.Message {
	var target *HttpFilter
	if m == nil {
		return target
	}
	target = &HttpFilter{}

	return target
}

// Clone function
func (m *TcpProxy) Clone() proto.Message {
	var target *TcpProxy
	if m == nil {
		return target
	}
	target = &TcpProxy{}

	return target
}
