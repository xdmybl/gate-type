// Code generated by engine gate build no edit

// This file contains generated Deepcopy methods for gate/v1 resources

package v1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// Generated Deepcopy methods for CaCertificate

func (in *CaCertificate) DeepCopyInto(out *CaCertificate) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)

	// deepcopy spec
	in.Spec.DeepCopyInto(&out.Spec)

	return
}

func (in *CaCertificate) DeepCopy() *CaCertificate {
	if in == nil {
		return nil
	}
	out := new(CaCertificate)
	in.DeepCopyInto(out)
	return out
}

func (in *CaCertificate) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *CaCertificateList) DeepCopyInto(out *CaCertificateList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CaCertificate, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

func (in *CaCertificateList) DeepCopy() *CaCertificateList {
	if in == nil {
		return nil
	}
	out := new(CaCertificateList)
	in.DeepCopyInto(out)
	return out
}

func (in *CaCertificateList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// Generated Deepcopy methods for SslCertificate

func (in *SslCertificate) DeepCopyInto(out *SslCertificate) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)

	// deepcopy spec
	in.Spec.DeepCopyInto(&out.Spec)

	return
}

func (in *SslCertificate) DeepCopy() *SslCertificate {
	if in == nil {
		return nil
	}
	out := new(SslCertificate)
	in.DeepCopyInto(out)
	return out
}

func (in *SslCertificate) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *SslCertificateList) DeepCopyInto(out *SslCertificateList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SslCertificate, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

func (in *SslCertificateList) DeepCopy() *SslCertificateList {
	if in == nil {
		return nil
	}
	out := new(SslCertificateList)
	in.DeepCopyInto(out)
	return out
}

func (in *SslCertificateList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}
