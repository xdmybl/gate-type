// 对应 cds 这一层一层

syntax = "proto3";

package gate.xdmybl.io;

option go_package = "github.com/xdmybl/gate-type/pkg/api/gate.xdmybl.io/v1";

import "validate/validate.proto";

import "proto/core/v1/gate.proto";
import "proto/core/v1/headers.proto";
import "proto/common/v1/tls.proto";
import "extproto/ext.proto";

option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

message UpstreamSpec {
  core.v1.CommonInfo commonInfo = 1;

  enum LbPolicy{
    reserved 4;

    // Refer to the :ref:`round robin load balancing
    // policy<arch_overview_load_balancing_types_round_robin>`
    // for an explanation.
    ROUND_ROBIN = 0;

    // Refer to the :ref:`least request load balancing
    // policy<arch_overview_load_balancing_types_least_request>`
    // for an explanation.
    LEAST_REQUEST = 1;

    // Refer to the :ref:`ring hash load balancing
    // policy<arch_overview_load_balancing_types_ring_hash>`
    // for an explanation.
    RING_HASH = 2;

    // Refer to the :ref:`random load balancing
    // policy<arch_overview_load_balancing_types_random>`
    // for an explanation.
    RANDOM = 3;

    // Refer to the :ref:`Maglev load balancing policy<arch_overview_load_balancing_types_maglev>`
    // for an explanation.
    MAGLEV = 5;
  }

  LbPolicy lbAlg = 2 [(validate.rules).enum.defined_only = true];

  common.v1.TlsClient sslConfigurations = 3;

  ConnPoll connPoll = 4;

  //core.v1.ResourceRef healthCheckRef = 5;

  // health check interval
  uint32 hcInterval = 5 [
    (validate.rules).uint32 = {
      gte: 5
    }
  ];

  uint32 hcTimeout = 6 [
    (validate.rules).uint32 = {
      gte: 5
    }
  ];

  // hc 健康阈值
  uint32 hcHealthyThreshold = 7 [
    (validate.rules).uint32 = {
      gte: 1
    }
  ];

  uint32 hcUnhealthyThreshold = 8 [
    (validate.rules).uint32 = {
      gte: 1
    }
  ];

  HealthCheckSpecifier hcSpecifier = 9;

  core.v1.StatefulSession statefulSession = 10;

  repeated core.v1.Endpoint endpoints = 11 [
    (validate.rules).repeated = {
      min_items: 1,
      max_items: 64
    }
  ];
}

message ConnPoll{
  uint32 maxRequestsPerConnection = 1;

  // 访问该集群的最大发连接数，默认值-1 (2^32-1 = 4294967295)。
  int64 maxConnections = 2 [
    (validate.rules).int64 = {
      gte: -1,
      lt: 4294967295
    }
  ];

  int64 maxRequests = 3 [
    (validate.rules).int64 = {
      gte: -1,
      lt: 4294967295
    }
  ];

  // 最大阻塞的请求数，默认值-1(2^32-1)。
  int64 maxPendingRequests = 4 [
    (validate.rules).int64 = {
      gte: -1,
      lt: 4294967295
    }
  ];

  string outboundSourceAddress = 5 [
    (validate.rules).string = {
      ignore_empty: true,
      ip: true,
    }
  ];
}

message WeightedUpstreamList {

  uint32 weight = 1 [(validate.rules).uint32 = {gte: 1}];

  core.v1.ResourceRef upstreamRef = 2;

  core.v1.HeaderManipulation headerManipulation  = 3 [(validate.rules).message.required = true];
}

message TcpHealthCheck {

  string sendPayload = 1 [
    (validate.rules).string = {
      ignore_empty: true,
      pattern: "^[0-9A-Fa-f]{1,512}$"
    }
  ];

  repeated string receivePayload = 2 [
    (validate.rules).string = {
      ignore_empty: true,
      pattern: "^[0-9A-Fa-f]{1,512}$"
    }
  ];
}

message HttpHealthCheck {
  string host = 1 [(validate.rules).string = {well_known_regex: HTTP_HEADER_VALUE strict: false}];

  string path = 2 [(validate.rules).string = {min_bytes: 1 well_known_regex: HTTP_HEADER_VALUE strict: false}];

  string method = 3 [
    (validate.rules).string = {
      in: ["GET", "HEAD", "POST", "OPTIONS", "TRACE"]
    }
  ];

  repeated uint32 expectedStatuses = 4 [
    (validate.rules).repeated = {
      ignore_empty: true,
      unique: true,
      max_items: 8,
      items: {
        uint32: {
          gte: 100,
          lt: 600
        }
      }
    }
  ];

  string ClientType = 5 [
    (validate.rules).string = {
      in: ["HTTP1", "HTTP2"]
    }
  ];
}

//https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/health_check.proto#config-core-v3-healthcheck
message HealthCheckSpecifier {

  enum Type {
    UNKNOWN = 0;
    TCP = 1;
    HTTP = 2;
  }

  Type type = 1 [(validate.rules).enum.defined_only = true];

  TcpHealthCheck tcpHealthCheck = 2;

  HttpHealthCheck httpHealthCheck = 3;
}

