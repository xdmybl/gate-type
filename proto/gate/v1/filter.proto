// 对应 envoy 的 filter 对象, 链接 https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener_components.proto#config-listener-v3-filter
// 定义这些对象有两种通用的思路:
// 1. 照搬相应的对象, 比如说 filter 是之前

syntax = "proto3";
package gate;

option go_package = "github.com/xdmybl/gate-type/pkg/api/gate/v1";

import "validate/validate.proto";
import "google/protobuf/struct.proto";

import "extproto/ext.proto";
import "proto/core/v1/gate.proto";

option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

// directly map to the Envoy v3 filter object
// 只好先用着 envoy 的名称, 其实 filter 是一个基于功能的取名
// 并不是基于概念的取名, 这里后期必然要换一个名
message FilterSpec {
  // common fields
  core.v1.CommonInfo commonInfo = 1;

  // 必为其中一种类型, 目前计划先支持两种, Tcp Http 协议的处理
  oneof filter_type {
    option (validate.required) = true;
    HttpConnectionManager hcm = 2;
    TcpProxy tcp_proxy = 3;
  }
}

// Hcm 直接对应 Envoy HCM
message HttpConnectionManager {
  // 对应 Envoy route_config_name
  string route_config_name = 1;
  repeated HttpFilter http_filter = 2;
  bool  merge_slashes = 3;
  bool  skip_xff_append = 4;
  // UseRemoteAddress
  // Rds
  // AccessLog
  // Tracing
}

// TODO 插件  HCM 级别插件配置
// 生成规则 HCM 级别插件规则需要看 Envoy 文档才能知道
message HttpFilter {
  // type_config
  // Name
}

// Envoy 的 extensions.filters.network.tcp_proxy.v3.TcpProxy 是一个网络过滤器，它可以在 Envoy 代理中拦截 TCP 流量，并将其转发到指定的目标地址。具体来说，TcpProxy 可以在客户端和服务端之间建立一个 TCP 连接，然后将客户端发送的请求转发到服务端，同时将服务端返回的响应转发回客户端。
//TcpProxy 过滤器可以用于实现负载均衡、流量控制、故障转移等功能，它支持多种负载均衡算法和健康检查机制，可以根据配置文件中的规则动态地选择目标地址，并在目标地址不可用时自动切换到备用地址。
//总之，TcpProxy 是一个非常有用的 Envoy 过滤器，可以帮助开发人员更好地控制和管理 Envoy 代理中的 TCP 流量。
//    - `stat_prefix`：用于在 Envoy 的统计信息中标识该 TCP 代理的前缀。
//    - `cluster`：指定要代理到的目标集群的名称。
//    - `access_log`：指定要记录访问日志的配置。
//    - `idle_timeout`：指定连接的空闲超时时间。
//    - `max_connect_attempts`：指定连接重试的最大次数。
//    - `upstream_connection_options`：指定要应用的上游连接选项。
//    - `downstream_connection_options`：指定要应用的下游连接选项。
//    - `hash_policy`：指定用于哈希负载均衡的策略。
//    - `metadata_match`：指定要匹配的元数据标签。
message TcpProxy {

}