package main

import (
	"github.com/solo-io/skv2/codegen"
	"github.com/solo-io/skv2/codegen/model"
	"github.com/solo-io/skv2/codegen/skv2_anyvendor"
	"github.com/solo-io/skv2/contrib"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"log"
)

var Group = model.Group{
	GroupVersion: schema.GroupVersion{
		Group:   "gate.xdmybl.io",
		Version: "v1",
	},
	Module: "github.com/xdmybl/gate-type",
	Resources: []model.Resource{
		{
			Kind: "CaCertificate",
			Spec: model.Field{
				Type: model.Type{
					Name: "CaCertificateSpec",
				},
			},
			//Status: &model.Field{
			//	Type: model.Type{
			//		Name: "KubernetesClusterStatus",
			//	},
			//},
		},
		{
			Kind: "SslCertificate",
			Spec: model.Field{
				Type: model.Type{
					Name: "SslCertificateSpec",
				},
			},
		},
		{
			Kind: "Upstream",
			Spec: model.Field{
				Type: model.Type{
					Name: "UpstreamSpec",
				},
			},
		},
		{
			Kind: "Gateway",
			Spec: model.Field{
				Type: model.Type{
					Name: "GatewaySpec",
				},
			},
		},
		{
			Kind: "Filter",
			Spec: model.Field{
				Type: model.Type{
					Name: "FilterSpec",
				},
			},
		},
	},
	RenderManifests:         true,
	RenderValidationSchemas: true,
	RenderController:        true,
	RenderClients:           true,
	RenderTypes:             true,
	MockgenDirective:        true,
	ApiRoot:                 "pkg/api",
	CustomTemplates:         contrib.AllGroupCustomTemplates,
}

// TODO: 解决 找不到 CaCertificateSpec proto 问题
func main() {
	skv2Imports := skv2_anyvendor.CreateDefaultMatchOptions([]string{
		"proto/**/*.proto",
	})
	skv2Imports.External["github.com/envoyproxy/protoc-gen-validate"] = []string{
		"validate/*.proto",
	}

	// skv2 允许通过本地导入 proto 库 , 如下
	// 一定要注意路径问题, 如 a/b/c/d/e.proto,
	//
	//skv2Imports.Local = []string{
	// a/b/**/*.proto
	//}
	//
	// import 时 则要填
	// import c/d/e.proto 不然找不到相应的文件
	// 要么全填相对路径, 要么全填绝对路径

	groups := []model.Group{
		Group,
	}

	// add internal k8s groups we depend on
	//groups = append(groups, k8s.Groups()...)

	skv2Cmd := codegen.Command{
		AppName:         "engine-gate",
		Groups:          groups,
		AnyVendorConfig: skv2Imports,
		RenderProtos:    true,
		ManifestRoot:    ".",
		GeneratedHeader: "Code generated by engine gate build no edit",
	}
	if err := skv2Cmd.Execute(); err != nil {
		log.Fatal(err)
	}
}
